// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Balancer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("poolCount", Value.fromI32(0));
    this.set("totalLiquidity", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalSwapCount", Value.fromBigInt(BigInt.zero()));
    this.set("totalSwapVolume", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalSwapFee", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Balancer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Balancer entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Balancer", id.toString(), this);
    }
  }

  static load(id: string): Balancer | null {
    return changetype<Balancer | null>(store.get("Balancer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolCount(): i32 {
    let value = this.get("poolCount");
    return value!.toI32();
  }

  set poolCount(value: i32) {
    this.set("poolCount", Value.fromI32(value));
  }

  get pools(): Array<string> | null {
    let value = this.get("pools");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set pools(value: Array<string> | null) {
    if (!value) {
      this.unset("pools");
    } else {
      this.set("pools", Value.fromStringArray(<Array<string>>value));
    }
  }

  get totalLiquidity(): BigDecimal {
    let value = this.get("totalLiquidity");
    return value!.toBigDecimal();
  }

  set totalLiquidity(value: BigDecimal) {
    this.set("totalLiquidity", Value.fromBigDecimal(value));
  }

  get totalSwapCount(): BigInt {
    let value = this.get("totalSwapCount");
    return value!.toBigInt();
  }

  set totalSwapCount(value: BigInt) {
    this.set("totalSwapCount", Value.fromBigInt(value));
  }

  get totalSwapVolume(): BigDecimal {
    let value = this.get("totalSwapVolume");
    return value!.toBigDecimal();
  }

  set totalSwapVolume(value: BigDecimal) {
    this.set("totalSwapVolume", Value.fromBigDecimal(value));
  }

  get totalSwapFee(): BigDecimal {
    let value = this.get("totalSwapFee");
    return value!.toBigDecimal();
  }

  set totalSwapFee(value: BigDecimal) {
    this.set("totalSwapFee", Value.fromBigDecimal(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("poolTypeVersion", Value.fromI32(0));
    this.set("strategyType", Value.fromI32(0));
    this.set("oracleEnabled", Value.fromBoolean(false));
    this.set("swapEnabled", Value.fromBoolean(false));
    this.set("swapFee", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("isPaused", Value.fromBoolean(false));
    this.set("totalSwapVolume", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalSwapFee", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalLiquidity", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalShares", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("createTime", Value.fromI32(0));
    this.set("swapsCount", Value.fromBigInt(BigInt.zero()));
    this.set("holdersCount", Value.fromBigInt(BigInt.zero()));
    this.set("vaultID", Value.fromString(""));
    this.set("tokensList", Value.fromBytesArray(new Array(0)));
    this.set("mainIndex", Value.fromI32(0));
    this.set("wrappedIndex", Value.fromI32(0));
    this.set("isInRecoveryMode", Value.fromBoolean(false));
    this.set("protocolId", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Pool entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Pool", id.toString(), this);
    }
  }

  static load(id: string): Pool | null {
    return changetype<Pool | null>(store.get("Pool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get poolType(): string | null {
    let value = this.get("poolType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set poolType(value: string | null) {
    if (!value) {
      this.unset("poolType");
    } else {
      this.set("poolType", Value.fromString(<string>value));
    }
  }

  get poolTypeVersion(): i32 {
    let value = this.get("poolTypeVersion");
    return value!.toI32();
  }

  set poolTypeVersion(value: i32) {
    this.set("poolTypeVersion", Value.fromI32(value));
  }

  get factory(): Bytes | null {
    let value = this.get("factory");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set factory(value: Bytes | null) {
    if (!value) {
      this.unset("factory");
    } else {
      this.set("factory", Value.fromBytes(<Bytes>value));
    }
  }

  get strategyType(): i32 {
    let value = this.get("strategyType");
    return value!.toI32();
  }

  set strategyType(value: i32) {
    this.set("strategyType", Value.fromI32(value));
  }

  get oracleEnabled(): boolean {
    let value = this.get("oracleEnabled");
    return value!.toBoolean();
  }

  set oracleEnabled(value: boolean) {
    this.set("oracleEnabled", Value.fromBoolean(value));
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (!value) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(<string>value));
    }
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get swapEnabled(): boolean {
    let value = this.get("swapEnabled");
    return value!.toBoolean();
  }

  set swapEnabled(value: boolean) {
    this.set("swapEnabled", Value.fromBoolean(value));
  }

  get swapFee(): BigDecimal {
    let value = this.get("swapFee");
    return value!.toBigDecimal();
  }

  set swapFee(value: BigDecimal) {
    this.set("swapFee", Value.fromBigDecimal(value));
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(<Bytes>value));
    }
  }

  get isPaused(): boolean {
    let value = this.get("isPaused");
    return value!.toBoolean();
  }

  set isPaused(value: boolean) {
    this.set("isPaused", Value.fromBoolean(value));
  }

  get totalWeight(): BigDecimal | null {
    let value = this.get("totalWeight");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set totalWeight(value: BigDecimal | null) {
    if (!value) {
      this.unset("totalWeight");
    } else {
      this.set("totalWeight", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get totalSwapVolume(): BigDecimal {
    let value = this.get("totalSwapVolume");
    return value!.toBigDecimal();
  }

  set totalSwapVolume(value: BigDecimal) {
    this.set("totalSwapVolume", Value.fromBigDecimal(value));
  }

  get totalSwapFee(): BigDecimal {
    let value = this.get("totalSwapFee");
    return value!.toBigDecimal();
  }

  set totalSwapFee(value: BigDecimal) {
    this.set("totalSwapFee", Value.fromBigDecimal(value));
  }

  get totalLiquidity(): BigDecimal {
    let value = this.get("totalLiquidity");
    return value!.toBigDecimal();
  }

  set totalLiquidity(value: BigDecimal) {
    this.set("totalLiquidity", Value.fromBigDecimal(value));
  }

  get totalShares(): BigDecimal {
    let value = this.get("totalShares");
    return value!.toBigDecimal();
  }

  set totalShares(value: BigDecimal) {
    this.set("totalShares", Value.fromBigDecimal(value));
  }

  get createTime(): i32 {
    let value = this.get("createTime");
    return value!.toI32();
  }

  set createTime(value: i32) {
    this.set("createTime", Value.fromI32(value));
  }

  get swapsCount(): BigInt {
    let value = this.get("swapsCount");
    return value!.toBigInt();
  }

  set swapsCount(value: BigInt) {
    this.set("swapsCount", Value.fromBigInt(value));
  }

  get holdersCount(): BigInt {
    let value = this.get("holdersCount");
    return value!.toBigInt();
  }

  set holdersCount(value: BigInt) {
    this.set("holdersCount", Value.fromBigInt(value));
  }

  get vaultID(): string {
    let value = this.get("vaultID");
    return value!.toString();
  }

  set vaultID(value: string) {
    this.set("vaultID", Value.fromString(value));
  }

  get tx(): Bytes | null {
    let value = this.get("tx");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tx(value: Bytes | null) {
    if (!value) {
      this.unset("tx");
    } else {
      this.set("tx", Value.fromBytes(<Bytes>value));
    }
  }

  get tokensList(): Array<Bytes> {
    let value = this.get("tokensList");
    return value!.toBytesArray();
  }

  set tokensList(value: Array<Bytes>) {
    this.set("tokensList", Value.fromBytesArray(value));
  }

  get tokens(): Array<string> | null {
    let value = this.get("tokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tokens(value: Array<string> | null) {
    if (!value) {
      this.unset("tokens");
    } else {
      this.set("tokens", Value.fromStringArray(<Array<string>>value));
    }
  }

  get swaps(): Array<string> | null {
    let value = this.get("swaps");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set swaps(value: Array<string> | null) {
    if (!value) {
      this.unset("swaps");
    } else {
      this.set("swaps", Value.fromStringArray(<Array<string>>value));
    }
  }

  get shares(): Array<string> | null {
    let value = this.get("shares");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set shares(value: Array<string> | null) {
    if (!value) {
      this.unset("shares");
    } else {
      this.set("shares", Value.fromStringArray(<Array<string>>value));
    }
  }

  get snapshots(): Array<string> | null {
    let value = this.get("snapshots");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set snapshots(value: Array<string> | null) {
    if (!value) {
      this.unset("snapshots");
    } else {
      this.set("snapshots", Value.fromStringArray(<Array<string>>value));
    }
  }

  get historicalValues(): Array<string> | null {
    let value = this.get("historicalValues");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set historicalValues(value: Array<string> | null) {
    if (!value) {
      this.unset("historicalValues");
    } else {
      this.set("historicalValues", Value.fromStringArray(<Array<string>>value));
    }
  }

  get weightUpdates(): Array<string> | null {
    let value = this.get("weightUpdates");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set weightUpdates(value: Array<string> | null) {
    if (!value) {
      this.unset("weightUpdates");
    } else {
      this.set("weightUpdates", Value.fromStringArray(<Array<string>>value));
    }
  }

  get amp(): BigInt | null {
    let value = this.get("amp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amp(value: BigInt | null) {
    if (!value) {
      this.unset("amp");
    } else {
      this.set("amp", Value.fromBigInt(<BigInt>value));
    }
  }

  get priceRateProviders(): Array<string> | null {
    let value = this.get("priceRateProviders");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set priceRateProviders(value: Array<string> | null) {
    if (!value) {
      this.unset("priceRateProviders");
    } else {
      this.set(
        "priceRateProviders",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get principalToken(): Bytes | null {
    let value = this.get("principalToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set principalToken(value: Bytes | null) {
    if (!value) {
      this.unset("principalToken");
    } else {
      this.set("principalToken", Value.fromBytes(<Bytes>value));
    }
  }

  get baseToken(): Bytes | null {
    let value = this.get("baseToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set baseToken(value: Bytes | null) {
    if (!value) {
      this.unset("baseToken");
    } else {
      this.set("baseToken", Value.fromBytes(<Bytes>value));
    }
  }

  get expiryTime(): BigInt | null {
    let value = this.get("expiryTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set expiryTime(value: BigInt | null) {
    if (!value) {
      this.unset("expiryTime");
    } else {
      this.set("expiryTime", Value.fromBigInt(<BigInt>value));
    }
  }

  get unitSeconds(): BigInt | null {
    let value = this.get("unitSeconds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set unitSeconds(value: BigInt | null) {
    if (!value) {
      this.unset("unitSeconds");
    } else {
      this.set("unitSeconds", Value.fromBigInt(<BigInt>value));
    }
  }

  get managementFee(): BigDecimal | null {
    let value = this.get("managementFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set managementFee(value: BigDecimal | null) {
    if (!value) {
      this.unset("managementFee");
    } else {
      this.set("managementFee", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get mainIndex(): i32 {
    let value = this.get("mainIndex");
    return value!.toI32();
  }

  set mainIndex(value: i32) {
    this.set("mainIndex", Value.fromI32(value));
  }

  get wrappedIndex(): i32 {
    let value = this.get("wrappedIndex");
    return value!.toI32();
  }

  set wrappedIndex(value: i32) {
    this.set("wrappedIndex", Value.fromI32(value));
  }

  get lowerTarget(): BigDecimal | null {
    let value = this.get("lowerTarget");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set lowerTarget(value: BigDecimal | null) {
    if (!value) {
      this.unset("lowerTarget");
    } else {
      this.set("lowerTarget", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get upperTarget(): BigDecimal | null {
    let value = this.get("upperTarget");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set upperTarget(value: BigDecimal | null) {
    if (!value) {
      this.unset("upperTarget");
    } else {
      this.set("upperTarget", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get sqrtAlpha(): BigDecimal | null {
    let value = this.get("sqrtAlpha");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set sqrtAlpha(value: BigDecimal | null) {
    if (!value) {
      this.unset("sqrtAlpha");
    } else {
      this.set("sqrtAlpha", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get sqrtBeta(): BigDecimal | null {
    let value = this.get("sqrtBeta");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set sqrtBeta(value: BigDecimal | null) {
    if (!value) {
      this.unset("sqrtBeta");
    } else {
      this.set("sqrtBeta", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get root3Alpha(): BigDecimal | null {
    let value = this.get("root3Alpha");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set root3Alpha(value: BigDecimal | null) {
    if (!value) {
      this.unset("root3Alpha");
    } else {
      this.set("root3Alpha", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get c(): BigDecimal | null {
    let value = this.get("c");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set c(value: BigDecimal | null) {
    if (!value) {
      this.unset("c");
    } else {
      this.set("c", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get s(): BigDecimal | null {
    let value = this.get("s");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set s(value: BigDecimal | null) {
    if (!value) {
      this.unset("s");
    } else {
      this.set("s", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get tauAlphaX(): BigDecimal | null {
    let value = this.get("tauAlphaX");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set tauAlphaX(value: BigDecimal | null) {
    if (!value) {
      this.unset("tauAlphaX");
    } else {
      this.set("tauAlphaX", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get tauAlphaY(): BigDecimal | null {
    let value = this.get("tauAlphaY");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set tauAlphaY(value: BigDecimal | null) {
    if (!value) {
      this.unset("tauAlphaY");
    } else {
      this.set("tauAlphaY", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get tauBetaX(): BigDecimal | null {
    let value = this.get("tauBetaX");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set tauBetaX(value: BigDecimal | null) {
    if (!value) {
      this.unset("tauBetaX");
    } else {
      this.set("tauBetaX", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get tauBetaY(): BigDecimal | null {
    let value = this.get("tauBetaY");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set tauBetaY(value: BigDecimal | null) {
    if (!value) {
      this.unset("tauBetaY");
    } else {
      this.set("tauBetaY", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get u(): BigDecimal | null {
    let value = this.get("u");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set u(value: BigDecimal | null) {
    if (!value) {
      this.unset("u");
    } else {
      this.set("u", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get v(): BigDecimal | null {
    let value = this.get("v");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set v(value: BigDecimal | null) {
    if (!value) {
      this.unset("v");
    } else {
      this.set("v", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get w(): BigDecimal | null {
    let value = this.get("w");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set w(value: BigDecimal | null) {
    if (!value) {
      this.unset("w");
    } else {
      this.set("w", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get z(): BigDecimal | null {
    let value = this.get("z");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set z(value: BigDecimal | null) {
    if (!value) {
      this.unset("z");
    } else {
      this.set("z", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get dSq(): BigDecimal | null {
    let value = this.get("dSq");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set dSq(value: BigDecimal | null) {
    if (!value) {
      this.unset("dSq");
    } else {
      this.set("dSq", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get alpha(): BigDecimal | null {
    let value = this.get("alpha");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set alpha(value: BigDecimal | null) {
    if (!value) {
      this.unset("alpha");
    } else {
      this.set("alpha", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get beta(): BigDecimal | null {
    let value = this.get("beta");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set beta(value: BigDecimal | null) {
    if (!value) {
      this.unset("beta");
    } else {
      this.set("beta", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get lambda(): BigDecimal | null {
    let value = this.get("lambda");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set lambda(value: BigDecimal | null) {
    if (!value) {
      this.unset("lambda");
    } else {
      this.set("lambda", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get delta(): BigDecimal | null {
    let value = this.get("delta");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set delta(value: BigDecimal | null) {
    if (!value) {
      this.unset("delta");
    } else {
      this.set("delta", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get epsilon(): BigDecimal | null {
    let value = this.get("epsilon");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set epsilon(value: BigDecimal | null) {
    if (!value) {
      this.unset("epsilon");
    } else {
      this.set("epsilon", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get isInRecoveryMode(): boolean {
    let value = this.get("isInRecoveryMode");
    return value!.toBoolean();
  }

  set isInRecoveryMode(value: boolean) {
    this.set("isInRecoveryMode", Value.fromBoolean(value));
  }

  get protocolSwapFeeCache(): BigDecimal | null {
    let value = this.get("protocolSwapFeeCache");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set protocolSwapFeeCache(value: BigDecimal | null) {
    if (!value) {
      this.unset("protocolSwapFeeCache");
    } else {
      this.set("protocolSwapFeeCache", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get protocolYieldFeeCache(): BigDecimal | null {
    let value = this.get("protocolYieldFeeCache");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set protocolYieldFeeCache(value: BigDecimal | null) {
    if (!value) {
      this.unset("protocolYieldFeeCache");
    } else {
      this.set(
        "protocolYieldFeeCache",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }

  get protocolAumFeeCache(): BigDecimal | null {
    let value = this.get("protocolAumFeeCache");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set protocolAumFeeCache(value: BigDecimal | null) {
    if (!value) {
      this.unset("protocolAumFeeCache");
    } else {
      this.set("protocolAumFeeCache", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get protocolId(): i32 {
    let value = this.get("protocolId");
    return value!.toI32();
  }

  set protocolId(value: i32) {
    this.set("protocolId", Value.fromI32(value));
  }

  get security(): Bytes | null {
    let value = this.get("security");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set security(value: Bytes | null) {
    if (!value) {
      this.unset("security");
    } else {
      this.set("security", Value.fromBytes(<Bytes>value));
    }
  }

  get currency(): Bytes | null {
    let value = this.get("currency");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set currency(value: Bytes | null) {
    if (!value) {
      this.unset("currency");
    } else {
      this.set("currency", Value.fromBytes(<Bytes>value));
    }
  }

  get balancerManager(): Bytes | null {
    let value = this.get("balancerManager");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set balancerManager(value: Bytes | null) {
    if (!value) {
      this.unset("balancerManager");
    } else {
      this.set("balancerManager", Value.fromBytes(<Bytes>value));
    }
  }

  get minimumOrderSize(): BigDecimal | null {
    let value = this.get("minimumOrderSize");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set minimumOrderSize(value: BigDecimal | null) {
    if (!value) {
      this.unset("minimumOrderSize");
    } else {
      this.set("minimumOrderSize", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get minimumPrice(): BigDecimal | null {
    let value = this.get("minimumPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set minimumPrice(value: BigDecimal | null) {
    if (!value) {
      this.unset("minimumPrice");
    } else {
      this.set("minimumPrice", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get securityOffered(): BigDecimal | null {
    let value = this.get("securityOffered");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set securityOffered(value: BigDecimal | null) {
    if (!value) {
      this.unset("securityOffered");
    } else {
      this.set("securityOffered", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get cutoffTime(): BigDecimal | null {
    let value = this.get("cutoffTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set cutoffTime(value: BigDecimal | null) {
    if (!value) {
      this.unset("cutoffTime");
    } else {
      this.set("cutoffTime", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get offeringDocs(): string | null {
    let value = this.get("offeringDocs");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set offeringDocs(value: string | null) {
    if (!value) {
      this.unset("offeringDocs");
    } else {
      this.set("offeringDocs", Value.fromString(<string>value));
    }
  }

  get primarySubscriptions(): Array<string> | null {
    let value = this.get("primarySubscriptions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set primarySubscriptions(value: Array<string> | null) {
    if (!value) {
      this.unset("primarySubscriptions");
    } else {
      this.set(
        "primarySubscriptions",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get minOrderSize(): BigInt | null {
    let value = this.get("minOrderSize");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minOrderSize(value: BigInt | null) {
    if (!value) {
      this.unset("minOrderSize");
    } else {
      this.set("minOrderSize", Value.fromBigInt(<BigInt>value));
    }
  }

  get orderBook(): Bytes | null {
    let value = this.get("orderBook");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set orderBook(value: Bytes | null) {
    if (!value) {
      this.unset("orderBook");
    } else {
      this.set("orderBook", Value.fromBytes(<Bytes>value));
    }
  }

  get issueManager(): Bytes | null {
    let value = this.get("issueManager");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set issueManager(value: Bytes | null) {
    if (!value) {
      this.unset("issueManager");
    } else {
      this.set("issueManager", Value.fromBytes(<Bytes>value));
    }
  }

  get secondaryTrades(): Array<string> | null {
    let value = this.get("secondaryTrades");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set secondaryTrades(value: Array<string> | null) {
    if (!value) {
      this.unset("secondaryTrades");
    } else {
      this.set("secondaryTrades", Value.fromStringArray(<Array<string>>value));
    }
  }

  get orders(): Array<string> | null {
    let value = this.get("orders");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set orders(value: Array<string> | null) {
    if (!value) {
      this.unset("orders");
    } else {
      this.set("orders", Value.fromStringArray(<Array<string>>value));
    }
  }

  get securityType(): Bytes | null {
    let value = this.get("securityType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set securityType(value: Bytes | null) {
    if (!value) {
      this.unset("securityType");
    } else {
      this.set("securityType", Value.fromBytes(<Bytes>value));
    }
  }

  get margin(): BigInt | null {
    let value = this.get("margin");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set margin(value: BigInt | null) {
    if (!value) {
      this.unset("margin");
    } else {
      this.set("margin", Value.fromBigInt(<BigInt>value));
    }
  }

  get collateral(): BigInt | null {
    let value = this.get("collateral");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set collateral(value: BigInt | null) {
    if (!value) {
      this.unset("collateral");
    } else {
      this.set("collateral", Value.fromBigInt(<BigInt>value));
    }
  }

  get cficode(): Bytes | null {
    let value = this.get("cficode");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set cficode(value: Bytes | null) {
    if (!value) {
      this.unset("cficode");
    } else {
      this.set("cficode", Value.fromBytes(<Bytes>value));
    }
  }
}

export class PrimaryIssues extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("pool", Value.fromString(""));
    this.set("assetIn", Value.fromString(""));
    this.set("assetOut", Value.fromString(""));
    this.set("subscription", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("investor", Value.fromString(""));
    this.set("price", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("executionDate", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PrimaryIssues entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PrimaryIssues entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PrimaryIssues", id.toString(), this);
    }
  }

  static load(id: string): PrimaryIssues | null {
    return changetype<PrimaryIssues | null>(store.get("PrimaryIssues", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get assetIn(): string {
    let value = this.get("assetIn");
    return value!.toString();
  }

  set assetIn(value: string) {
    this.set("assetIn", Value.fromString(value));
  }

  get assetOut(): string {
    let value = this.get("assetOut");
    return value!.toString();
  }

  set assetOut(value: string) {
    this.set("assetOut", Value.fromString(value));
  }

  get subscription(): BigDecimal {
    let value = this.get("subscription");
    return value!.toBigDecimal();
  }

  set subscription(value: BigDecimal) {
    this.set("subscription", Value.fromBigDecimal(value));
  }

  get investor(): string {
    let value = this.get("investor");
    return value!.toString();
  }

  set investor(value: string) {
    this.set("investor", Value.fromString(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    return value!.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get executionDate(): BigInt {
    let value = this.get("executionDate");
    return value!.toBigInt();
  }

  set executionDate(value: BigInt) {
    this.set("executionDate", Value.fromBigInt(value));
  }
}

export class SecondaryTrades extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("pool", Value.fromString(""));
    this.set("orderType", Value.fromBytes(Bytes.empty()));
    this.set("price", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("currency", Value.fromString(""));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("executionDate", Value.fromBigInt(BigInt.zero()));
    this.set("orderReference", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SecondaryTrades entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SecondaryTrades entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SecondaryTrades", id.toString(), this);
    }
  }

  static load(id: string): SecondaryTrades | null {
    return changetype<SecondaryTrades | null>(store.get("SecondaryTrades", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get party(): string | null {
    let value = this.get("party");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set party(value: string | null) {
    if (!value) {
      this.unset("party");
    } else {
      this.set("party", Value.fromString(<string>value));
    }
  }

  get counterparty(): string | null {
    let value = this.get("counterparty");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set counterparty(value: string | null) {
    if (!value) {
      this.unset("counterparty");
    } else {
      this.set("counterparty", Value.fromString(<string>value));
    }
  }

  get orderType(): Bytes {
    let value = this.get("orderType");
    return value!.toBytes();
  }

  set orderType(value: Bytes) {
    this.set("orderType", Value.fromBytes(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    return value!.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get executionDate(): BigInt {
    let value = this.get("executionDate");
    return value!.toBigInt();
  }

  set executionDate(value: BigInt) {
    this.set("executionDate", Value.fromBigInt(value));
  }

  get orderReference(): Bytes {
    let value = this.get("orderReference");
    return value!.toBytes();
  }

  set orderReference(value: Bytes) {
    this.set("orderReference", Value.fromBytes(value));
  }
}

export class SecondaryOrders extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("pool", Value.fromString(""));
    this.set("tokenIn", Value.fromString(""));
    this.set("tokenOut", Value.fromString(""));
    this.set("amountOffered", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("priceOffered", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("orderReference", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SecondaryOrders entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SecondaryOrders entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SecondaryOrders", id.toString(), this);
    }
  }

  static load(id: string): SecondaryOrders | null {
    return changetype<SecondaryOrders | null>(store.get("SecondaryOrders", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get creator(): Bytes | null {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set creator(value: Bytes | null) {
    if (!value) {
      this.unset("creator");
    } else {
      this.set("creator", Value.fromBytes(<Bytes>value));
    }
  }

  get tokenIn(): string {
    let value = this.get("tokenIn");
    return value!.toString();
  }

  set tokenIn(value: string) {
    this.set("tokenIn", Value.fromString(value));
  }

  get tokenOut(): string {
    let value = this.get("tokenOut");
    return value!.toString();
  }

  set tokenOut(value: string) {
    this.set("tokenOut", Value.fromString(value));
  }

  get amountOffered(): BigDecimal {
    let value = this.get("amountOffered");
    return value!.toBigDecimal();
  }

  set amountOffered(value: BigDecimal) {
    this.set("amountOffered", Value.fromBigDecimal(value));
  }

  get priceOffered(): BigDecimal {
    let value = this.get("priceOffered");
    return value!.toBigDecimal();
  }

  set priceOffered(value: BigDecimal) {
    this.set("priceOffered", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get orderReference(): Bytes {
    let value = this.get("orderReference");
    return value!.toBytes();
  }

  set orderReference(value: Bytes) {
    this.set("orderReference", Value.fromBytes(value));
  }
}

export class MarginOrders extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("pool", Value.fromString(""));
    this.set("tokenIn", Value.fromString(""));
    this.set("tokenOut", Value.fromString(""));
    this.set("amountOffered", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("priceOffered", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("stoplossPrice", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("orderReference", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarginOrders entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save MarginOrders entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("MarginOrders", id.toString(), this);
    }
  }

  static load(id: string): MarginOrders | null {
    return changetype<MarginOrders | null>(store.get("MarginOrders", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get creator(): Bytes | null {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set creator(value: Bytes | null) {
    if (!value) {
      this.unset("creator");
    } else {
      this.set("creator", Value.fromBytes(<Bytes>value));
    }
  }

  get tokenIn(): string {
    let value = this.get("tokenIn");
    return value!.toString();
  }

  set tokenIn(value: string) {
    this.set("tokenIn", Value.fromString(value));
  }

  get tokenOut(): string {
    let value = this.get("tokenOut");
    return value!.toString();
  }

  set tokenOut(value: string) {
    this.set("tokenOut", Value.fromString(value));
  }

  get amountOffered(): BigDecimal {
    let value = this.get("amountOffered");
    return value!.toBigDecimal();
  }

  set amountOffered(value: BigDecimal) {
    this.set("amountOffered", Value.fromBigDecimal(value));
  }

  get priceOffered(): BigDecimal {
    let value = this.get("priceOffered");
    return value!.toBigDecimal();
  }

  set priceOffered(value: BigDecimal) {
    this.set("priceOffered", Value.fromBigDecimal(value));
  }

  get stoplossPrice(): BigDecimal {
    let value = this.get("stoplossPrice");
    return value!.toBigDecimal();
  }

  set stoplossPrice(value: BigDecimal) {
    this.set("stoplossPrice", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get orderReference(): Bytes {
    let value = this.get("orderReference");
    return value!.toBytes();
  }

  set orderReference(value: Bytes) {
    this.set("orderReference", Value.fromBytes(value));
  }
}

export class PoolContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("pool", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolContract entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PoolContract entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PoolContract", id.toString(), this);
    }
  }

  static load(id: string): PoolContract | null {
    return changetype<PoolContract | null>(store.get("PoolContract", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }
}

export class PoolToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token", Value.fromString(""));
    this.set("assetManager", Value.fromBytes(Bytes.empty()));
    this.set("symbol", Value.fromString(""));
    this.set("name", Value.fromString(""));
    this.set("decimals", Value.fromI32(0));
    this.set("index", Value.fromI32(0));
    this.set("address", Value.fromString(""));
    this.set("priceRate", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("balance", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("cashBalance", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("managedBalance", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("isExemptFromYieldProtocolFee", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PoolToken entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PoolToken", id.toString(), this);
    }
  }

  static load(id: string): PoolToken | null {
    return changetype<PoolToken | null>(store.get("PoolToken", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolId(): string | null {
    let value = this.get("poolId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set poolId(value: string | null) {
    if (!value) {
      this.unset("poolId");
    } else {
      this.set("poolId", Value.fromString(<string>value));
    }
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get assetManager(): Bytes {
    let value = this.get("assetManager");
    return value!.toBytes();
  }

  set assetManager(value: Bytes) {
    this.set("assetManager", Value.fromBytes(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value!.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get index(): i32 {
    let value = this.get("index");
    return value!.toI32();
  }

  set index(value: i32) {
    this.set("index", Value.fromI32(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get priceRate(): BigDecimal {
    let value = this.get("priceRate");
    return value!.toBigDecimal();
  }

  set priceRate(value: BigDecimal) {
    this.set("priceRate", Value.fromBigDecimal(value));
  }

  get balance(): BigDecimal {
    let value = this.get("balance");
    return value!.toBigDecimal();
  }

  set balance(value: BigDecimal) {
    this.set("balance", Value.fromBigDecimal(value));
  }

  get cashBalance(): BigDecimal {
    let value = this.get("cashBalance");
    return value!.toBigDecimal();
  }

  set cashBalance(value: BigDecimal) {
    this.set("cashBalance", Value.fromBigDecimal(value));
  }

  get managedBalance(): BigDecimal {
    let value = this.get("managedBalance");
    return value!.toBigDecimal();
  }

  set managedBalance(value: BigDecimal) {
    this.set("managedBalance", Value.fromBigDecimal(value));
  }

  get managements(): Array<string> | null {
    let value = this.get("managements");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set managements(value: Array<string> | null) {
    if (!value) {
      this.unset("managements");
    } else {
      this.set("managements", Value.fromStringArray(<Array<string>>value));
    }
  }

  get weight(): BigDecimal | null {
    let value = this.get("weight");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set weight(value: BigDecimal | null) {
    if (!value) {
      this.unset("weight");
    } else {
      this.set("weight", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get isExemptFromYieldProtocolFee(): boolean {
    let value = this.get("isExemptFromYieldProtocolFee");
    return value!.toBoolean();
  }

  set isExemptFromYieldProtocolFee(value: boolean) {
    this.set("isExemptFromYieldProtocolFee", Value.fromBoolean(value));
  }
}

export class PriceRateProvider extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("poolId", Value.fromString(""));
    this.set("token", Value.fromString(""));
    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("lastCached", Value.fromI32(0));
    this.set("cacheDuration", Value.fromI32(0));
    this.set("cacheExpiry", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PriceRateProvider entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PriceRateProvider entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PriceRateProvider", id.toString(), this);
    }
  }

  static load(id: string): PriceRateProvider | null {
    return changetype<PriceRateProvider | null>(
      store.get("PriceRateProvider", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolId(): string {
    let value = this.get("poolId");
    return value!.toString();
  }

  set poolId(value: string) {
    this.set("poolId", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get rate(): BigDecimal | null {
    let value = this.get("rate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set rate(value: BigDecimal | null) {
    if (!value) {
      this.unset("rate");
    } else {
      this.set("rate", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get lastCached(): i32 {
    let value = this.get("lastCached");
    return value!.toI32();
  }

  set lastCached(value: i32) {
    this.set("lastCached", Value.fromI32(value));
  }

  get cacheDuration(): i32 {
    let value = this.get("cacheDuration");
    return value!.toI32();
  }

  set cacheDuration(value: i32) {
    this.set("cacheDuration", Value.fromI32(value));
  }

  get cacheExpiry(): i32 {
    let value = this.get("cacheExpiry");
    return value!.toI32();
  }

  set cacheExpiry(value: i32) {
    this.set("cacheExpiry", Value.fromI32(value));
  }
}

export class PoolShare extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("userAddress", Value.fromString(""));
    this.set("poolId", Value.fromString(""));
    this.set("balance", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolShare entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PoolShare entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PoolShare", id.toString(), this);
    }
  }

  static load(id: string): PoolShare | null {
    return changetype<PoolShare | null>(store.get("PoolShare", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userAddress(): string {
    let value = this.get("userAddress");
    return value!.toString();
  }

  set userAddress(value: string) {
    this.set("userAddress", Value.fromString(value));
  }

  get poolId(): string {
    let value = this.get("poolId");
    return value!.toString();
  }

  set poolId(value: string) {
    this.set("poolId", Value.fromString(value));
  }

  get balance(): BigDecimal {
    let value = this.get("balance");
    return value!.toBigDecimal();
  }

  set balance(value: BigDecimal) {
    this.set("balance", Value.fromBigDecimal(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sharesOwned(): Array<string> | null {
    let value = this.get("sharesOwned");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set sharesOwned(value: Array<string> | null) {
    if (!value) {
      this.unset("sharesOwned");
    } else {
      this.set("sharesOwned", Value.fromStringArray(<Array<string>>value));
    }
  }

  get swaps(): Array<string> | null {
    let value = this.get("swaps");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set swaps(value: Array<string> | null) {
    if (!value) {
      this.unset("swaps");
    } else {
      this.set("swaps", Value.fromStringArray(<Array<string>>value));
    }
  }

  get userInternalBalances(): Array<string> | null {
    let value = this.get("userInternalBalances");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set userInternalBalances(value: Array<string> | null) {
    if (!value) {
      this.unset("userInternalBalances");
    } else {
      this.set(
        "userInternalBalances",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }
}

export class UserInternalBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token", Value.fromBytes(Bytes.empty()));
    this.set("balance", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserInternalBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UserInternalBalance entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UserInternalBalance", id.toString(), this);
    }
  }

  static load(id: string): UserInternalBalance | null {
    return changetype<UserInternalBalance | null>(
      store.get("UserInternalBalance", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userAddress(): string | null {
    let value = this.get("userAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set userAddress(value: string | null) {
    if (!value) {
      this.unset("userAddress");
    } else {
      this.set("userAddress", Value.fromString(<string>value));
    }
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get balance(): BigDecimal {
    let value = this.get("balance");
    return value!.toBigDecimal();
  }

  set balance(value: BigDecimal) {
    this.set("balance", Value.fromBigDecimal(value));
  }
}

export class GradualWeightUpdate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("poolId", Value.fromString(""));
    this.set("scheduledTimestamp", Value.fromI32(0));
    this.set("startTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("endTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("startWeights", Value.fromBigIntArray(new Array(0)));
    this.set("endWeights", Value.fromBigIntArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GradualWeightUpdate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save GradualWeightUpdate entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("GradualWeightUpdate", id.toString(), this);
    }
  }

  static load(id: string): GradualWeightUpdate | null {
    return changetype<GradualWeightUpdate | null>(
      store.get("GradualWeightUpdate", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolId(): string {
    let value = this.get("poolId");
    return value!.toString();
  }

  set poolId(value: string) {
    this.set("poolId", Value.fromString(value));
  }

  get scheduledTimestamp(): i32 {
    let value = this.get("scheduledTimestamp");
    return value!.toI32();
  }

  set scheduledTimestamp(value: i32) {
    this.set("scheduledTimestamp", Value.fromI32(value));
  }

  get startTimestamp(): BigInt {
    let value = this.get("startTimestamp");
    return value!.toBigInt();
  }

  set startTimestamp(value: BigInt) {
    this.set("startTimestamp", Value.fromBigInt(value));
  }

  get endTimestamp(): BigInt {
    let value = this.get("endTimestamp");
    return value!.toBigInt();
  }

  set endTimestamp(value: BigInt) {
    this.set("endTimestamp", Value.fromBigInt(value));
  }

  get startWeights(): Array<BigInt> {
    let value = this.get("startWeights");
    return value!.toBigIntArray();
  }

  set startWeights(value: Array<BigInt>) {
    this.set("startWeights", Value.fromBigIntArray(value));
  }

  get endWeights(): Array<BigInt> {
    let value = this.get("endWeights");
    return value!.toBigIntArray();
  }

  set endWeights(value: Array<BigInt>) {
    this.set("endWeights", Value.fromBigIntArray(value));
  }
}

export class AmpUpdate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("poolId", Value.fromString(""));
    this.set("scheduledTimestamp", Value.fromI32(0));
    this.set("startTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("endTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("startAmp", Value.fromBigInt(BigInt.zero()));
    this.set("endAmp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AmpUpdate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AmpUpdate entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AmpUpdate", id.toString(), this);
    }
  }

  static load(id: string): AmpUpdate | null {
    return changetype<AmpUpdate | null>(store.get("AmpUpdate", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolId(): string {
    let value = this.get("poolId");
    return value!.toString();
  }

  set poolId(value: string) {
    this.set("poolId", Value.fromString(value));
  }

  get scheduledTimestamp(): i32 {
    let value = this.get("scheduledTimestamp");
    return value!.toI32();
  }

  set scheduledTimestamp(value: i32) {
    this.set("scheduledTimestamp", Value.fromI32(value));
  }

  get startTimestamp(): BigInt {
    let value = this.get("startTimestamp");
    return value!.toBigInt();
  }

  set startTimestamp(value: BigInt) {
    this.set("startTimestamp", Value.fromBigInt(value));
  }

  get endTimestamp(): BigInt {
    let value = this.get("endTimestamp");
    return value!.toBigInt();
  }

  set endTimestamp(value: BigInt) {
    this.set("endTimestamp", Value.fromBigInt(value));
  }

  get startAmp(): BigInt {
    let value = this.get("startAmp");
    return value!.toBigInt();
  }

  set startAmp(value: BigInt) {
    this.set("startAmp", Value.fromBigInt(value));
  }

  get endAmp(): BigInt {
    let value = this.get("endAmp");
    return value!.toBigInt();
  }

  set endAmp(value: BigInt) {
    this.set("endAmp", Value.fromBigInt(value));
  }
}

export class SwapFeeUpdate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("pool", Value.fromString(""));
    this.set("scheduledTimestamp", Value.fromI32(0));
    this.set("startTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("endTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("startSwapFeePercentage", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("endSwapFeePercentage", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SwapFeeUpdate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SwapFeeUpdate entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SwapFeeUpdate", id.toString(), this);
    }
  }

  static load(id: string): SwapFeeUpdate | null {
    return changetype<SwapFeeUpdate | null>(store.get("SwapFeeUpdate", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get scheduledTimestamp(): i32 {
    let value = this.get("scheduledTimestamp");
    return value!.toI32();
  }

  set scheduledTimestamp(value: i32) {
    this.set("scheduledTimestamp", Value.fromI32(value));
  }

  get startTimestamp(): BigInt {
    let value = this.get("startTimestamp");
    return value!.toBigInt();
  }

  set startTimestamp(value: BigInt) {
    this.set("startTimestamp", Value.fromBigInt(value));
  }

  get endTimestamp(): BigInt {
    let value = this.get("endTimestamp");
    return value!.toBigInt();
  }

  set endTimestamp(value: BigInt) {
    this.set("endTimestamp", Value.fromBigInt(value));
  }

  get startSwapFeePercentage(): BigDecimal {
    let value = this.get("startSwapFeePercentage");
    return value!.toBigDecimal();
  }

  set startSwapFeePercentage(value: BigDecimal) {
    this.set("startSwapFeePercentage", Value.fromBigDecimal(value));
  }

  get endSwapFeePercentage(): BigDecimal {
    let value = this.get("endSwapFeePercentage");
    return value!.toBigDecimal();
  }

  set endSwapFeePercentage(value: BigDecimal) {
    this.set("endSwapFeePercentage", Value.fromBigDecimal(value));
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("caller", Value.fromBytes(Bytes.empty()));
    this.set("tokenIn", Value.fromBytes(Bytes.empty()));
    this.set("tokenInSym", Value.fromString(""));
    this.set("tokenOut", Value.fromBytes(Bytes.empty()));
    this.set("tokenOutSym", Value.fromString(""));
    this.set("tokenAmountIn", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("tokenAmountOut", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("valueUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("poolId", Value.fromString(""));
    this.set("userAddress", Value.fromString(""));
    this.set("timestamp", Value.fromI32(0));
    this.set("tx", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Swap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Swap entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Swap", id.toString(), this);
    }
  }

  static load(id: string): Swap | null {
    return changetype<Swap | null>(store.get("Swap", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value!.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }

  get tokenIn(): Bytes {
    let value = this.get("tokenIn");
    return value!.toBytes();
  }

  set tokenIn(value: Bytes) {
    this.set("tokenIn", Value.fromBytes(value));
  }

  get tokenInSym(): string {
    let value = this.get("tokenInSym");
    return value!.toString();
  }

  set tokenInSym(value: string) {
    this.set("tokenInSym", Value.fromString(value));
  }

  get tokenOut(): Bytes {
    let value = this.get("tokenOut");
    return value!.toBytes();
  }

  set tokenOut(value: Bytes) {
    this.set("tokenOut", Value.fromBytes(value));
  }

  get tokenOutSym(): string {
    let value = this.get("tokenOutSym");
    return value!.toString();
  }

  set tokenOutSym(value: string) {
    this.set("tokenOutSym", Value.fromString(value));
  }

  get tokenAmountIn(): BigDecimal {
    let value = this.get("tokenAmountIn");
    return value!.toBigDecimal();
  }

  set tokenAmountIn(value: BigDecimal) {
    this.set("tokenAmountIn", Value.fromBigDecimal(value));
  }

  get tokenAmountOut(): BigDecimal {
    let value = this.get("tokenAmountOut");
    return value!.toBigDecimal();
  }

  set tokenAmountOut(value: BigDecimal) {
    this.set("tokenAmountOut", Value.fromBigDecimal(value));
  }

  get valueUSD(): BigDecimal {
    let value = this.get("valueUSD");
    return value!.toBigDecimal();
  }

  set valueUSD(value: BigDecimal) {
    this.set("valueUSD", Value.fromBigDecimal(value));
  }

  get poolId(): string {
    let value = this.get("poolId");
    return value!.toString();
  }

  set poolId(value: string) {
    this.set("poolId", Value.fromString(value));
  }

  get userAddress(): string {
    let value = this.get("userAddress");
    return value!.toString();
  }

  set userAddress(value: string) {
    this.set("userAddress", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get tx(): Bytes {
    let value = this.get("tx");
    return value!.toBytes();
  }

  set tx(value: Bytes) {
    this.set("tx", Value.fromBytes(value));
  }
}

export class JoinExit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("type", Value.fromString(""));
    this.set("sender", Value.fromBytes(Bytes.empty()));
    this.set("amounts", Value.fromBigDecimalArray(new Array(0)));
    this.set("pool", Value.fromString(""));
    this.set("user", Value.fromString(""));
    this.set("timestamp", Value.fromI32(0));
    this.set("tx", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save JoinExit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save JoinExit entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("JoinExit", id.toString(), this);
    }
  }

  static load(id: string): JoinExit | null {
    return changetype<JoinExit | null>(store.get("JoinExit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get amounts(): Array<BigDecimal> {
    let value = this.get("amounts");
    return value!.toBigDecimalArray();
  }

  set amounts(value: Array<BigDecimal>) {
    this.set("amounts", Value.fromBigDecimalArray(value));
  }

  get valueUSD(): BigDecimal | null {
    let value = this.get("valueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set valueUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("valueUSD");
    } else {
      this.set("valueUSD", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get tx(): Bytes {
    let value = this.get("tx");
    return value!.toBytes();
  }

  set tx(value: Bytes) {
    this.set("tx", Value.fromBytes(value));
  }
}

export class LatestPrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("asset", Value.fromBytes(Bytes.empty()));
    this.set("pricingAsset", Value.fromBytes(Bytes.empty()));
    this.set("poolId", Value.fromString(""));
    this.set("price", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("block", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LatestPrice entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LatestPrice entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LatestPrice", id.toString(), this);
    }
  }

  static load(id: string): LatestPrice | null {
    return changetype<LatestPrice | null>(store.get("LatestPrice", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    return value!.toBytes();
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get pricingAsset(): Bytes {
    let value = this.get("pricingAsset");
    return value!.toBytes();
  }

  set pricingAsset(value: Bytes) {
    this.set("pricingAsset", Value.fromBytes(value));
  }

  get poolId(): string {
    let value = this.get("poolId");
    return value!.toString();
  }

  set poolId(value: string) {
    this.set("poolId", Value.fromString(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    return value!.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class PoolHistoricalLiquidity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("poolId", Value.fromString(""));
    this.set("poolTotalShares", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("poolLiquidity", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("poolShareValue", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("pricingAsset", Value.fromBytes(Bytes.empty()));
    this.set("block", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save PoolHistoricalLiquidity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PoolHistoricalLiquidity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PoolHistoricalLiquidity", id.toString(), this);
    }
  }

  static load(id: string): PoolHistoricalLiquidity | null {
    return changetype<PoolHistoricalLiquidity | null>(
      store.get("PoolHistoricalLiquidity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolId(): string {
    let value = this.get("poolId");
    return value!.toString();
  }

  set poolId(value: string) {
    this.set("poolId", Value.fromString(value));
  }

  get poolTotalShares(): BigDecimal {
    let value = this.get("poolTotalShares");
    return value!.toBigDecimal();
  }

  set poolTotalShares(value: BigDecimal) {
    this.set("poolTotalShares", Value.fromBigDecimal(value));
  }

  get poolLiquidity(): BigDecimal {
    let value = this.get("poolLiquidity");
    return value!.toBigDecimal();
  }

  set poolLiquidity(value: BigDecimal) {
    this.set("poolLiquidity", Value.fromBigDecimal(value));
  }

  get poolShareValue(): BigDecimal {
    let value = this.get("poolShareValue");
    return value!.toBigDecimal();
  }

  set poolShareValue(value: BigDecimal) {
    this.set("poolShareValue", Value.fromBigDecimal(value));
  }

  get pricingAsset(): Bytes {
    let value = this.get("pricingAsset");
    return value!.toBytes();
  }

  set pricingAsset(value: Bytes) {
    this.set("pricingAsset", Value.fromBytes(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class TokenPrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("poolId", Value.fromString(""));
    this.set("asset", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("pricingAsset", Value.fromBytes(Bytes.empty()));
    this.set("price", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("block", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenPrice entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TokenPrice entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TokenPrice", id.toString(), this);
    }
  }

  static load(id: string): TokenPrice | null {
    return changetype<TokenPrice | null>(store.get("TokenPrice", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolId(): string {
    let value = this.get("poolId");
    return value!.toString();
  }

  set poolId(value: string) {
    this.set("poolId", Value.fromString(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    return value!.toBytes();
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get pricingAsset(): Bytes {
    let value = this.get("pricingAsset");
    return value!.toBytes();
  }

  set pricingAsset(value: Bytes) {
    this.set("pricingAsset", Value.fromBytes(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    return value!.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class ManagementOperation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("type", Value.fromString(""));
    this.set("cashDelta", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("managedDelta", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("poolTokenId", Value.fromString(""));
    this.set("timestamp", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ManagementOperation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ManagementOperation entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ManagementOperation", id.toString(), this);
    }
  }

  static load(id: string): ManagementOperation | null {
    return changetype<ManagementOperation | null>(
      store.get("ManagementOperation", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get cashDelta(): BigDecimal {
    let value = this.get("cashDelta");
    return value!.toBigDecimal();
  }

  set cashDelta(value: BigDecimal) {
    this.set("cashDelta", Value.fromBigDecimal(value));
  }

  get managedDelta(): BigDecimal {
    let value = this.get("managedDelta");
    return value!.toBigDecimal();
  }

  set managedDelta(value: BigDecimal) {
    this.set("managedDelta", Value.fromBigDecimal(value));
  }

  get poolTokenId(): string {
    let value = this.get("poolTokenId");
    return value!.toString();
  }

  set poolTokenId(value: string) {
    this.set("poolTokenId", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class PoolSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("pool", Value.fromString(""));
    this.set("amounts", Value.fromBigDecimalArray(new Array(0)));
    this.set("totalShares", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("swapVolume", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("swapFees", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("liquidity", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("swapsCount", Value.fromBigInt(BigInt.zero()));
    this.set("holdersCount", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PoolSnapshot entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PoolSnapshot", id.toString(), this);
    }
  }

  static load(id: string): PoolSnapshot | null {
    return changetype<PoolSnapshot | null>(store.get("PoolSnapshot", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get amounts(): Array<BigDecimal> {
    let value = this.get("amounts");
    return value!.toBigDecimalArray();
  }

  set amounts(value: Array<BigDecimal>) {
    this.set("amounts", Value.fromBigDecimalArray(value));
  }

  get totalShares(): BigDecimal {
    let value = this.get("totalShares");
    return value!.toBigDecimal();
  }

  set totalShares(value: BigDecimal) {
    this.set("totalShares", Value.fromBigDecimal(value));
  }

  get swapVolume(): BigDecimal {
    let value = this.get("swapVolume");
    return value!.toBigDecimal();
  }

  set swapVolume(value: BigDecimal) {
    this.set("swapVolume", Value.fromBigDecimal(value));
  }

  get swapFees(): BigDecimal {
    let value = this.get("swapFees");
    return value!.toBigDecimal();
  }

  set swapFees(value: BigDecimal) {
    this.set("swapFees", Value.fromBigDecimal(value));
  }

  get liquidity(): BigDecimal {
    let value = this.get("liquidity");
    return value!.toBigDecimal();
  }

  set liquidity(value: BigDecimal) {
    this.set("liquidity", Value.fromBigDecimal(value));
  }

  get swapsCount(): BigInt {
    let value = this.get("swapsCount");
    return value!.toBigInt();
  }

  set swapsCount(value: BigInt) {
    this.set("swapsCount", Value.fromBigInt(value));
  }

  get holdersCount(): BigInt {
    let value = this.get("holdersCount");
    return value!.toBigInt();
  }

  set holdersCount(value: BigInt) {
    this.set("holdersCount", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("decimals", Value.fromI32(0));
    this.set("address", Value.fromString(""));
    this.set("totalBalanceUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalBalanceNotional", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalVolumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalVolumeNotional", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalSwapCount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (!value) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(<string>value));
    }
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value!.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get totalBalanceUSD(): BigDecimal {
    let value = this.get("totalBalanceUSD");
    return value!.toBigDecimal();
  }

  set totalBalanceUSD(value: BigDecimal) {
    this.set("totalBalanceUSD", Value.fromBigDecimal(value));
  }

  get totalBalanceNotional(): BigDecimal {
    let value = this.get("totalBalanceNotional");
    return value!.toBigDecimal();
  }

  set totalBalanceNotional(value: BigDecimal) {
    this.set("totalBalanceNotional", Value.fromBigDecimal(value));
  }

  get totalVolumeUSD(): BigDecimal {
    let value = this.get("totalVolumeUSD");
    return value!.toBigDecimal();
  }

  set totalVolumeUSD(value: BigDecimal) {
    this.set("totalVolumeUSD", Value.fromBigDecimal(value));
  }

  get totalVolumeNotional(): BigDecimal {
    let value = this.get("totalVolumeNotional");
    return value!.toBigDecimal();
  }

  set totalVolumeNotional(value: BigDecimal) {
    this.set("totalVolumeNotional", Value.fromBigDecimal(value));
  }

  get totalSwapCount(): BigInt {
    let value = this.get("totalSwapCount");
    return value!.toBigInt();
  }

  set totalSwapCount(value: BigInt) {
    this.set("totalSwapCount", Value.fromBigInt(value));
  }

  get latestPrice(): string | null {
    let value = this.get("latestPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestPrice(value: string | null) {
    if (!value) {
      this.unset("latestPrice");
    } else {
      this.set("latestPrice", Value.fromString(<string>value));
    }
  }

  get latestUSDPrice(): BigDecimal | null {
    let value = this.get("latestUSDPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set latestUSDPrice(value: BigDecimal | null) {
    if (!value) {
      this.unset("latestUSDPrice");
    } else {
      this.set("latestUSDPrice", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get latestFXPrice(): BigDecimal | null {
    let value = this.get("latestFXPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set latestFXPrice(value: BigDecimal | null) {
    if (!value) {
      this.unset("latestFXPrice");
    } else {
      this.set("latestFXPrice", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get pool(): string | null {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pool(value: string | null) {
    if (!value) {
      this.unset("pool");
    } else {
      this.set("pool", Value.fromString(<string>value));
    }
  }
}

export class TokenSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token", Value.fromString(""));
    this.set("timestamp", Value.fromI32(0));
    this.set("totalBalanceUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalBalanceNotional", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalVolumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalVolumeNotional", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalSwapCount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TokenSnapshot entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TokenSnapshot", id.toString(), this);
    }
  }

  static load(id: string): TokenSnapshot | null {
    return changetype<TokenSnapshot | null>(store.get("TokenSnapshot", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get totalBalanceUSD(): BigDecimal {
    let value = this.get("totalBalanceUSD");
    return value!.toBigDecimal();
  }

  set totalBalanceUSD(value: BigDecimal) {
    this.set("totalBalanceUSD", Value.fromBigDecimal(value));
  }

  get totalBalanceNotional(): BigDecimal {
    let value = this.get("totalBalanceNotional");
    return value!.toBigDecimal();
  }

  set totalBalanceNotional(value: BigDecimal) {
    this.set("totalBalanceNotional", Value.fromBigDecimal(value));
  }

  get totalVolumeUSD(): BigDecimal {
    let value = this.get("totalVolumeUSD");
    return value!.toBigDecimal();
  }

  set totalVolumeUSD(value: BigDecimal) {
    this.set("totalVolumeUSD", Value.fromBigDecimal(value));
  }

  get totalVolumeNotional(): BigDecimal {
    let value = this.get("totalVolumeNotional");
    return value!.toBigDecimal();
  }

  set totalVolumeNotional(value: BigDecimal) {
    this.set("totalVolumeNotional", Value.fromBigDecimal(value));
  }

  get totalSwapCount(): BigInt {
    let value = this.get("totalSwapCount");
    return value!.toBigInt();
  }

  set totalSwapCount(value: BigInt) {
    this.set("totalSwapCount", Value.fromBigInt(value));
  }
}

export class TradePair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token0", Value.fromString(""));
    this.set("token1", Value.fromString(""));
    this.set("totalSwapVolume", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalSwapFee", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TradePair entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TradePair entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TradePair", id.toString(), this);
    }
  }

  static load(id: string): TradePair | null {
    return changetype<TradePair | null>(store.get("TradePair", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token0(): string {
    let value = this.get("token0");
    return value!.toString();
  }

  set token0(value: string) {
    this.set("token0", Value.fromString(value));
  }

  get token1(): string {
    let value = this.get("token1");
    return value!.toString();
  }

  set token1(value: string) {
    this.set("token1", Value.fromString(value));
  }

  get totalSwapVolume(): BigDecimal {
    let value = this.get("totalSwapVolume");
    return value!.toBigDecimal();
  }

  set totalSwapVolume(value: BigDecimal) {
    this.set("totalSwapVolume", Value.fromBigDecimal(value));
  }

  get totalSwapFee(): BigDecimal {
    let value = this.get("totalSwapFee");
    return value!.toBigDecimal();
  }

  set totalSwapFee(value: BigDecimal) {
    this.set("totalSwapFee", Value.fromBigDecimal(value));
  }
}

export class TradePairSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("pair", Value.fromString(""));
    this.set("timestamp", Value.fromI32(0));
    this.set("totalSwapVolume", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalSwapFee", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TradePairSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TradePairSnapshot entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TradePairSnapshot", id.toString(), this);
    }
  }

  static load(id: string): TradePairSnapshot | null {
    return changetype<TradePairSnapshot | null>(
      store.get("TradePairSnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value!.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get totalSwapVolume(): BigDecimal {
    let value = this.get("totalSwapVolume");
    return value!.toBigDecimal();
  }

  set totalSwapVolume(value: BigDecimal) {
    this.set("totalSwapVolume", Value.fromBigDecimal(value));
  }

  get totalSwapFee(): BigDecimal {
    let value = this.get("totalSwapFee");
    return value!.toBigDecimal();
  }

  set totalSwapFee(value: BigDecimal) {
    this.set("totalSwapFee", Value.fromBigDecimal(value));
  }
}

export class BalancerSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("vault", Value.fromString(""));
    this.set("timestamp", Value.fromI32(0));
    this.set("poolCount", Value.fromI32(0));
    this.set("totalLiquidity", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalSwapCount", Value.fromBigInt(BigInt.zero()));
    this.set("totalSwapVolume", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalSwapFee", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BalancerSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BalancerSnapshot entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BalancerSnapshot", id.toString(), this);
    }
  }

  static load(id: string): BalancerSnapshot | null {
    return changetype<BalancerSnapshot | null>(
      store.get("BalancerSnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get poolCount(): i32 {
    let value = this.get("poolCount");
    return value!.toI32();
  }

  set poolCount(value: i32) {
    this.set("poolCount", Value.fromI32(value));
  }

  get totalLiquidity(): BigDecimal {
    let value = this.get("totalLiquidity");
    return value!.toBigDecimal();
  }

  set totalLiquidity(value: BigDecimal) {
    this.set("totalLiquidity", Value.fromBigDecimal(value));
  }

  get totalSwapCount(): BigInt {
    let value = this.get("totalSwapCount");
    return value!.toBigInt();
  }

  set totalSwapCount(value: BigInt) {
    this.set("totalSwapCount", Value.fromBigInt(value));
  }

  get totalSwapVolume(): BigDecimal {
    let value = this.get("totalSwapVolume");
    return value!.toBigDecimal();
  }

  set totalSwapVolume(value: BigDecimal) {
    this.set("totalSwapVolume", Value.fromBigDecimal(value));
  }

  get totalSwapFee(): BigDecimal {
    let value = this.get("totalSwapFee");
    return value!.toBigDecimal();
  }

  set totalSwapFee(value: BigDecimal) {
    this.set("totalSwapFee", Value.fromBigDecimal(value));
  }
}
