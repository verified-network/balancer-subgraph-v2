// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MarginOffer extends ethereum.Event {
  get params(): MarginOffer__Params {
    return new MarginOffer__Params(this);
  }
}

export class MarginOffer__Params {
  _event: MarginOffer;

  constructor(event: MarginOffer) {
    this._event = event;
  }

  get security(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get securityType(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get minOrderSize(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get currency(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get margin(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get collateral(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get CfiCode(): Bytes {
    return this._event.parameters[6].value.toBytes();
  }

  get orderBook(): Address {
    return this._event.parameters[7].value.toAddress();
  }

  get issueManager(): Address {
    return this._event.parameters[8].value.toAddress();
  }
}

export class MarginOrderBook extends ethereum.Event {
  get params(): MarginOrderBook__Params {
    return new MarginOrderBook__Params(this);
  }
}

export class MarginOrderBook__Params {
  _event: MarginOrderBook;

  constructor(event: MarginOrderBook) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenIn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenOut(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amountOffered(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get priceOffered(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get stoplossPrice(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get orderRef(): Bytes {
    return this._event.parameters[7].value.toBytes();
  }
}

export class MarginTradeReport extends ethereum.Event {
  get params(): MarginTradeReport__Params {
    return new MarginTradeReport__Params(this);
  }
}

export class MarginTradeReport__Params {
  _event: MarginTradeReport;

  constructor(event: MarginTradeReport) {
    this._event = event;
  }

  get security(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get orderRef(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get party(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get counterparty(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get orderType(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get price(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get currency(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get executionDate(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class PausedStateChanged extends ethereum.Event {
  get params(): PausedStateChanged__Params {
    return new PausedStateChanged__Params(this);
  }
}

export class PausedStateChanged__Params {
  _event: PausedStateChanged;

  constructor(event: PausedStateChanged) {
    this._event = event;
  }

  get paused(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class RecoveryModeStateChanged extends ethereum.Event {
  get params(): RecoveryModeStateChanged__Params {
    return new RecoveryModeStateChanged__Params(this);
  }
}

export class RecoveryModeStateChanged__Params {
  _event: RecoveryModeStateChanged;

  constructor(event: RecoveryModeStateChanged) {
    this._event = event;
  }

  get enabled(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class SwapFeePercentageChanged extends ethereum.Event {
  get params(): SwapFeePercentageChanged__Params {
    return new SwapFeePercentageChanged__Params(this);
  }
}

export class SwapFeePercentageChanged__Params {
  _event: SwapFeePercentageChanged;

  constructor(event: SwapFeePercentageChanged) {
    this._event = event;
  }

  get swapFeePercentage(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MarginTradingPool__getPausedStateResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: boolean, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class MarginTradingPool__onExitPoolResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class MarginTradingPool__onJoinPoolResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class MarginTradingPool__onSwapInputRequestStruct extends ethereum.Tuple {
  get kind(): i32 {
    return this[0].toI32();
  }

  get tokenIn(): Address {
    return this[1].toAddress();
  }

  get tokenOut(): Address {
    return this[2].toAddress();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get poolId(): Bytes {
    return this[4].toBytes();
  }

  get lastChangeBlock(): BigInt {
    return this[5].toBigInt();
  }

  get from(): Address {
    return this[6].toAddress();
  }

  get to(): Address {
    return this[7].toAddress();
  }

  get userData(): Bytes {
    return this[8].toBytes();
  }
}

export class MarginTradingPool__queryExitResult {
  value0: BigInt;
  value1: Array<BigInt>;

  constructor(value0: BigInt, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class MarginTradingPool__queryJoinResult {
  value0: BigInt;
  value1: Array<BigInt>;

  constructor(value0: BigInt, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class MarginTradingPool extends ethereum.SmartContract {
  static bind(address: Address): MarginTradingPool {
    return new MarginTradingPool("MarginTradingPool", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  _orderbook(): Address {
    let result = super.call("_orderbook", "_orderbook():(address)", []);

    return result[0].toAddress();
  }

  try__orderbook(): ethereum.CallResult<Address> {
    let result = super.tryCall("_orderbook", "_orderbook():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, amount: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getActionId(selector: Bytes): Bytes {
    let result = super.call("getActionId", "getActionId(bytes4):(bytes32)", [
      ethereum.Value.fromFixedBytes(selector)
    ]);

    return result[0].toBytes();
  }

  try_getActionId(selector: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getActionId", "getActionId(bytes4):(bytes32)", [
      ethereum.Value.fromFixedBytes(selector)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAuthorizer(): Address {
    let result = super.call("getAuthorizer", "getAuthorizer():(address)", []);

    return result[0].toAddress();
  }

  try_getAuthorizer(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAuthorizer",
      "getAuthorizer():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCollateral(): BigInt {
    let result = super.call("getCollateral", "getCollateral():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getCollateral(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCollateral",
      "getCollateral():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrency(): Address {
    let result = super.call("getCurrency", "getCurrency():(address)", []);

    return result[0].toAddress();
  }

  try_getCurrency(): ethereum.CallResult<Address> {
    let result = super.tryCall("getCurrency", "getCurrency():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDomainSeparator(): Bytes {
    let result = super.call(
      "getDomainSeparator",
      "getDomainSeparator():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_getDomainSeparator(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getDomainSeparator",
      "getDomainSeparator():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getFee(): BigInt {
    let result = super.call("getFee", "getFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getFee", "getFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMargin(): BigInt {
    let result = super.call("getMargin", "getMargin():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getMargin(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getMargin", "getMargin():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMinOrderSize(): BigInt {
    let result = super.call(
      "getMinOrderSize",
      "getMinOrderSize():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMinOrderSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMinOrderSize",
      "getMinOrderSize():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNextNonce(account: Address): BigInt {
    let result = super.call("getNextNonce", "getNextNonce(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_getNextNonce(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNextNonce",
      "getNextNonce(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOrderbook(): Address {
    let result = super.call("getOrderbook", "getOrderbook():(address)", []);

    return result[0].toAddress();
  }

  try_getOrderbook(): ethereum.CallResult<Address> {
    let result = super.tryCall("getOrderbook", "getOrderbook():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOwner(): Address {
    let result = super.call("getOwner", "getOwner():(address)", []);

    return result[0].toAddress();
  }

  try_getOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("getOwner", "getOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPausedState(): MarginTradingPool__getPausedStateResult {
    let result = super.call(
      "getPausedState",
      "getPausedState():(bool,uint256,uint256)",
      []
    );

    return new MarginTradingPool__getPausedStateResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getPausedState(): ethereum.CallResult<
    MarginTradingPool__getPausedStateResult
  > {
    let result = super.tryCall(
      "getPausedState",
      "getPausedState():(bool,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarginTradingPool__getPausedStateResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getPoolId(): Bytes {
    let result = super.call("getPoolId", "getPoolId():(bytes32)", []);

    return result[0].toBytes();
  }

  try_getPoolId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getPoolId", "getPoolId():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getProtocolFeesCollector(): Address {
    let result = super.call(
      "getProtocolFeesCollector",
      "getProtocolFeesCollector():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getProtocolFeesCollector(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getProtocolFeesCollector",
      "getProtocolFeesCollector():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getScalingFactors(): Array<BigInt> {
    let result = super.call(
      "getScalingFactors",
      "getScalingFactors():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getScalingFactors(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getScalingFactors",
      "getScalingFactors():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getSecurity(): Address {
    let result = super.call("getSecurity", "getSecurity():(address)", []);

    return result[0].toAddress();
  }

  try_getSecurity(): ethereum.CallResult<Address> {
    let result = super.tryCall("getSecurity", "getSecurity():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSwapFeePercentage(): BigInt {
    let result = super.call(
      "getSwapFeePercentage",
      "getSwapFeePercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getSwapFeePercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSwapFeePercentage",
      "getSwapFeePercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVault(): Address {
    let result = super.call("getVault", "getVault():(address)", []);

    return result[0].toAddress();
  }

  try_getVault(): ethereum.CallResult<Address> {
    let result = super.tryCall("getVault", "getVault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  inRecoveryMode(): boolean {
    let result = super.call("inRecoveryMode", "inRecoveryMode():(bool)", []);

    return result[0].toBoolean();
  }

  try_inRecoveryMode(): ethereum.CallResult<boolean> {
    let result = super.tryCall("inRecoveryMode", "inRecoveryMode():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(owner: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onExitPool(
    poolId: Bytes,
    sender: Address,
    recipient: Address,
    balances: Array<BigInt>,
    lastChangeBlock: BigInt,
    protocolSwapFeePercentage: BigInt,
    userData: Bytes
  ): MarginTradingPool__onExitPoolResult {
    let result = super.call(
      "onExitPool",
      "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256[],uint256[])",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigIntArray(balances),
        ethereum.Value.fromUnsignedBigInt(lastChangeBlock),
        ethereum.Value.fromUnsignedBigInt(protocolSwapFeePercentage),
        ethereum.Value.fromBytes(userData)
      ]
    );

    return new MarginTradingPool__onExitPoolResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray()
    );
  }

  try_onExitPool(
    poolId: Bytes,
    sender: Address,
    recipient: Address,
    balances: Array<BigInt>,
    lastChangeBlock: BigInt,
    protocolSwapFeePercentage: BigInt,
    userData: Bytes
  ): ethereum.CallResult<MarginTradingPool__onExitPoolResult> {
    let result = super.tryCall(
      "onExitPool",
      "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256[],uint256[])",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigIntArray(balances),
        ethereum.Value.fromUnsignedBigInt(lastChangeBlock),
        ethereum.Value.fromUnsignedBigInt(protocolSwapFeePercentage),
        ethereum.Value.fromBytes(userData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarginTradingPool__onExitPoolResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray()
      )
    );
  }

  onJoinPool(
    poolId: Bytes,
    sender: Address,
    recipient: Address,
    balances: Array<BigInt>,
    lastChangeBlock: BigInt,
    protocolSwapFeePercentage: BigInt,
    userData: Bytes
  ): MarginTradingPool__onJoinPoolResult {
    let result = super.call(
      "onJoinPool",
      "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256[],uint256[])",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigIntArray(balances),
        ethereum.Value.fromUnsignedBigInt(lastChangeBlock),
        ethereum.Value.fromUnsignedBigInt(protocolSwapFeePercentage),
        ethereum.Value.fromBytes(userData)
      ]
    );

    return new MarginTradingPool__onJoinPoolResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray()
    );
  }

  try_onJoinPool(
    poolId: Bytes,
    sender: Address,
    recipient: Address,
    balances: Array<BigInt>,
    lastChangeBlock: BigInt,
    protocolSwapFeePercentage: BigInt,
    userData: Bytes
  ): ethereum.CallResult<MarginTradingPool__onJoinPoolResult> {
    let result = super.tryCall(
      "onJoinPool",
      "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256[],uint256[])",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigIntArray(balances),
        ethereum.Value.fromUnsignedBigInt(lastChangeBlock),
        ethereum.Value.fromUnsignedBigInt(protocolSwapFeePercentage),
        ethereum.Value.fromBytes(userData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarginTradingPool__onJoinPoolResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray()
      )
    );
  }

  onSwap(
    request: MarginTradingPool__onSwapInputRequestStruct,
    balances: Array<BigInt>,
    indexIn: BigInt,
    indexOut: BigInt
  ): BigInt {
    let result = super.call(
      "onSwap",
      "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256[],uint256,uint256):(uint256)",
      [
        ethereum.Value.fromTuple(request),
        ethereum.Value.fromUnsignedBigIntArray(balances),
        ethereum.Value.fromUnsignedBigInt(indexIn),
        ethereum.Value.fromUnsignedBigInt(indexOut)
      ]
    );

    return result[0].toBigInt();
  }

  try_onSwap(
    request: MarginTradingPool__onSwapInputRequestStruct,
    balances: Array<BigInt>,
    indexIn: BigInt,
    indexOut: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "onSwap",
      "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256[],uint256,uint256):(uint256)",
      [
        ethereum.Value.fromTuple(request),
        ethereum.Value.fromUnsignedBigIntArray(balances),
        ethereum.Value.fromUnsignedBigInt(indexIn),
        ethereum.Value.fromUnsignedBigInt(indexOut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  queryExit(
    poolId: Bytes,
    sender: Address,
    recipient: Address,
    balances: Array<BigInt>,
    lastChangeBlock: BigInt,
    protocolSwapFeePercentage: BigInt,
    userData: Bytes
  ): MarginTradingPool__queryExitResult {
    let result = super.call(
      "queryExit",
      "queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256,uint256[])",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigIntArray(balances),
        ethereum.Value.fromUnsignedBigInt(lastChangeBlock),
        ethereum.Value.fromUnsignedBigInt(protocolSwapFeePercentage),
        ethereum.Value.fromBytes(userData)
      ]
    );

    return new MarginTradingPool__queryExitResult(
      result[0].toBigInt(),
      result[1].toBigIntArray()
    );
  }

  try_queryExit(
    poolId: Bytes,
    sender: Address,
    recipient: Address,
    balances: Array<BigInt>,
    lastChangeBlock: BigInt,
    protocolSwapFeePercentage: BigInt,
    userData: Bytes
  ): ethereum.CallResult<MarginTradingPool__queryExitResult> {
    let result = super.tryCall(
      "queryExit",
      "queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256,uint256[])",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigIntArray(balances),
        ethereum.Value.fromUnsignedBigInt(lastChangeBlock),
        ethereum.Value.fromUnsignedBigInt(protocolSwapFeePercentage),
        ethereum.Value.fromBytes(userData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarginTradingPool__queryExitResult(
        value[0].toBigInt(),
        value[1].toBigIntArray()
      )
    );
  }

  queryJoin(
    poolId: Bytes,
    sender: Address,
    recipient: Address,
    balances: Array<BigInt>,
    lastChangeBlock: BigInt,
    protocolSwapFeePercentage: BigInt,
    userData: Bytes
  ): MarginTradingPool__queryJoinResult {
    let result = super.call(
      "queryJoin",
      "queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256,uint256[])",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigIntArray(balances),
        ethereum.Value.fromUnsignedBigInt(lastChangeBlock),
        ethereum.Value.fromUnsignedBigInt(protocolSwapFeePercentage),
        ethereum.Value.fromBytes(userData)
      ]
    );

    return new MarginTradingPool__queryJoinResult(
      result[0].toBigInt(),
      result[1].toBigIntArray()
    );
  }

  try_queryJoin(
    poolId: Bytes,
    sender: Address,
    recipient: Address,
    balances: Array<BigInt>,
    lastChangeBlock: BigInt,
    protocolSwapFeePercentage: BigInt,
    userData: Bytes
  ): ethereum.CallResult<MarginTradingPool__queryJoinResult> {
    let result = super.tryCall(
      "queryJoin",
      "queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256,uint256[])",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigIntArray(balances),
        ethereum.Value.fromUnsignedBigInt(lastChangeBlock),
        ethereum.Value.fromUnsignedBigInt(protocolSwapFeePercentage),
        ethereum.Value.fromBytes(userData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarginTradingPool__queryJoinResult(
        value[0].toBigInt(),
        value[1].toBigIntArray()
      )
    );
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get factoryPoolParams(): ConstructorCallFactoryPoolParamsStruct {
    return changetype<ConstructorCallFactoryPoolParamsStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get pauseWindowDuration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get bufferPeriodDuration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get owner(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCallFactoryPoolParamsStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get symbol(): string {
    return this[1].toString();
  }

  get security(): Address {
    return this[2].toAddress();
  }

  get securityType(): Bytes {
    return this[3].toBytes();
  }

  get currency(): Address {
    return this[4].toAddress();
  }

  get cficode(): Bytes {
    return this[5].toBytes();
  }

  get minOrderSize(): BigInt {
    return this[6].toBigInt();
  }

  get margin(): BigInt {
    return this[7].toBigInt();
  }

  get collateral(): BigInt {
    return this[8].toBigInt();
  }

  get tradeFeePercentage(): BigInt {
    return this[9].toBigInt();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DisableRecoveryModeCall extends ethereum.Call {
  get inputs(): DisableRecoveryModeCall__Inputs {
    return new DisableRecoveryModeCall__Inputs(this);
  }

  get outputs(): DisableRecoveryModeCall__Outputs {
    return new DisableRecoveryModeCall__Outputs(this);
  }
}

export class DisableRecoveryModeCall__Inputs {
  _call: DisableRecoveryModeCall;

  constructor(call: DisableRecoveryModeCall) {
    this._call = call;
  }
}

export class DisableRecoveryModeCall__Outputs {
  _call: DisableRecoveryModeCall;

  constructor(call: DisableRecoveryModeCall) {
    this._call = call;
  }
}

export class EnableRecoveryModeCall extends ethereum.Call {
  get inputs(): EnableRecoveryModeCall__Inputs {
    return new EnableRecoveryModeCall__Inputs(this);
  }

  get outputs(): EnableRecoveryModeCall__Outputs {
    return new EnableRecoveryModeCall__Outputs(this);
  }
}

export class EnableRecoveryModeCall__Inputs {
  _call: EnableRecoveryModeCall;

  constructor(call: EnableRecoveryModeCall) {
    this._call = call;
  }
}

export class EnableRecoveryModeCall__Outputs {
  _call: EnableRecoveryModeCall;

  constructor(call: EnableRecoveryModeCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class OnExitPoolCall extends ethereum.Call {
  get inputs(): OnExitPoolCall__Inputs {
    return new OnExitPoolCall__Inputs(this);
  }

  get outputs(): OnExitPoolCall__Outputs {
    return new OnExitPoolCall__Outputs(this);
  }
}

export class OnExitPoolCall__Inputs {
  _call: OnExitPoolCall;

  constructor(call: OnExitPoolCall) {
    this._call = call;
  }

  get poolId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get sender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get balances(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get lastChangeBlock(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get protocolSwapFeePercentage(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get userData(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class OnExitPoolCall__Outputs {
  _call: OnExitPoolCall;

  constructor(call: OnExitPoolCall) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }

  get value1(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class OnJoinPoolCall extends ethereum.Call {
  get inputs(): OnJoinPoolCall__Inputs {
    return new OnJoinPoolCall__Inputs(this);
  }

  get outputs(): OnJoinPoolCall__Outputs {
    return new OnJoinPoolCall__Outputs(this);
  }
}

export class OnJoinPoolCall__Inputs {
  _call: OnJoinPoolCall;

  constructor(call: OnJoinPoolCall) {
    this._call = call;
  }

  get poolId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get sender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get balances(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get lastChangeBlock(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get protocolSwapFeePercentage(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get userData(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class OnJoinPoolCall__Outputs {
  _call: OnJoinPoolCall;

  constructor(call: OnJoinPoolCall) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }

  get value1(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class OnSwapCall extends ethereum.Call {
  get inputs(): OnSwapCall__Inputs {
    return new OnSwapCall__Inputs(this);
  }

  get outputs(): OnSwapCall__Outputs {
    return new OnSwapCall__Outputs(this);
  }
}

export class OnSwapCall__Inputs {
  _call: OnSwapCall;

  constructor(call: OnSwapCall) {
    this._call = call;
  }

  get request(): OnSwapCallRequestStruct {
    return changetype<OnSwapCallRequestStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get balances(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get indexIn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get indexOut(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class OnSwapCall__Outputs {
  _call: OnSwapCall;

  constructor(call: OnSwapCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class OnSwapCallRequestStruct extends ethereum.Tuple {
  get kind(): i32 {
    return this[0].toI32();
  }

  get tokenIn(): Address {
    return this[1].toAddress();
  }

  get tokenOut(): Address {
    return this[2].toAddress();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get poolId(): Bytes {
    return this[4].toBytes();
  }

  get lastChangeBlock(): BigInt {
    return this[5].toBigInt();
  }

  get from(): Address {
    return this[6].toAddress();
  }

  get to(): Address {
    return this[7].toAddress();
  }

  get userData(): Bytes {
    return this[8].toBytes();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class SetAssetManagerPoolConfigCall extends ethereum.Call {
  get inputs(): SetAssetManagerPoolConfigCall__Inputs {
    return new SetAssetManagerPoolConfigCall__Inputs(this);
  }

  get outputs(): SetAssetManagerPoolConfigCall__Outputs {
    return new SetAssetManagerPoolConfigCall__Outputs(this);
  }
}

export class SetAssetManagerPoolConfigCall__Inputs {
  _call: SetAssetManagerPoolConfigCall;

  constructor(call: SetAssetManagerPoolConfigCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get poolConfig(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetAssetManagerPoolConfigCall__Outputs {
  _call: SetAssetManagerPoolConfigCall;

  constructor(call: SetAssetManagerPoolConfigCall) {
    this._call = call;
  }
}

export class SetSwapFeePercentageCall extends ethereum.Call {
  get inputs(): SetSwapFeePercentageCall__Inputs {
    return new SetSwapFeePercentageCall__Inputs(this);
  }

  get outputs(): SetSwapFeePercentageCall__Outputs {
    return new SetSwapFeePercentageCall__Outputs(this);
  }
}

export class SetSwapFeePercentageCall__Inputs {
  _call: SetSwapFeePercentageCall;

  constructor(call: SetSwapFeePercentageCall) {
    this._call = call;
  }

  get swapFeePercentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSwapFeePercentageCall__Outputs {
  _call: SetSwapFeePercentageCall;

  constructor(call: SetSwapFeePercentageCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}
