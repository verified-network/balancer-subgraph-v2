// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FeeCollection extends ethereum.Event {
  get params(): FeeCollection__Params {
    return new FeeCollection__Params(this);
  }
}

export class FeeCollection__Params {
  _event: FeeCollection;

  constructor(event: FeeCollection) {
    this._event = event;
  }

  get collectedBase(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collectedBond(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get remainingBase(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get remainingBond(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ConvergentCurvePool__onExitPoolResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class ConvergentCurvePool__onJoinPoolResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class ConvergentCurvePool__onSwapInputSwapRequestStruct extends ethereum.Tuple {
  get kind(): i32 {
    return this[0].toI32();
  }

  get tokenIn(): Address {
    return this[1].toAddress();
  }

  get tokenOut(): Address {
    return this[2].toAddress();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get poolId(): Bytes {
    return this[4].toBytes();
  }

  get lastChangeBlock(): BigInt {
    return this[5].toBigInt();
  }

  get from(): Address {
    return this[6].toAddress();
  }

  get to(): Address {
    return this[7].toAddress();
  }

  get userData(): Bytes {
    return this[8].toBytes();
  }
}

export class ConvergentCurvePool extends ethereum.SmartContract {
  static bind(address: Address): ConvergentCurvePool {
    return new ConvergentCurvePool("ConvergentCurvePool", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  FEE_BOUND(): BigInt {
    let result = super.call("FEE_BOUND", "FEE_BOUND():(uint256)", []);

    return result[0].toBigInt();
  }

  try_FEE_BOUND(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("FEE_BOUND", "FEE_BOUND():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bond(): Address {
    let result = super.call("bond", "bond():(address)", []);

    return result[0].toAddress();
  }

  try_bond(): ethereum.CallResult<Address> {
    let result = super.tryCall("bond", "bond():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bondDecimals(): i32 {
    let result = super.call("bondDecimals", "bondDecimals():(uint8)", []);

    return result[0].toI32();
  }

  try_bondDecimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("bondDecimals", "bondDecimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseApproval(spender: Address, amount: BigInt): boolean {
    let result = super.call(
      "decreaseApproval",
      "decreaseApproval(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseApproval(
    spender: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseApproval",
      "decreaseApproval(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  expiration(): BigInt {
    let result = super.call("expiration", "expiration():(uint256)", []);

    return result[0].toBigInt();
  }

  try_expiration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("expiration", "expiration():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feesBond(): BigInt {
    let result = super.call("feesBond", "feesBond():(uint128)", []);

    return result[0].toBigInt();
  }

  try_feesBond(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feesBond", "feesBond():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feesUnderlying(): BigInt {
    let result = super.call("feesUnderlying", "feesUnderlying():(uint128)", []);

    return result[0].toBigInt();
  }

  try_feesUnderlying(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feesUnderlying",
      "feesUnderlying():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPoolId(): Bytes {
    let result = super.call("getPoolId", "getPoolId():(bytes32)", []);

    return result[0].toBytes();
  }

  try_getPoolId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getPoolId", "getPoolId():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getVault(): Address {
    let result = super.call("getVault", "getVault():(address)", []);

    return result[0].toAddress();
  }

  try_getVault(): ethereum.CallResult<Address> {
    let result = super.tryCall("getVault", "getVault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  governance(): Address {
    let result = super.call("governance", "governance():(address)", []);

    return result[0].toAddress();
  }

  try_governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("governance", "governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  increaseApproval(spender: Address, amount: BigInt): boolean {
    let result = super.call(
      "increaseApproval",
      "increaseApproval(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseApproval(
    spender: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseApproval",
      "increaseApproval(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(owner: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onExitPool(
    poolId: Bytes,
    param1: Address,
    recipient: Address,
    currentBalances: Array<BigInt>,
    param4: BigInt,
    protocolSwapFee: BigInt,
    userData: Bytes
  ): ConvergentCurvePool__onExitPoolResult {
    let result = super.call(
      "onExitPool",
      "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256[],uint256[])",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigIntArray(currentBalances),
        ethereum.Value.fromUnsignedBigInt(param4),
        ethereum.Value.fromUnsignedBigInt(protocolSwapFee),
        ethereum.Value.fromBytes(userData)
      ]
    );

    return new ConvergentCurvePool__onExitPoolResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray()
    );
  }

  try_onExitPool(
    poolId: Bytes,
    param1: Address,
    recipient: Address,
    currentBalances: Array<BigInt>,
    param4: BigInt,
    protocolSwapFee: BigInt,
    userData: Bytes
  ): ethereum.CallResult<ConvergentCurvePool__onExitPoolResult> {
    let result = super.tryCall(
      "onExitPool",
      "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256[],uint256[])",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigIntArray(currentBalances),
        ethereum.Value.fromUnsignedBigInt(param4),
        ethereum.Value.fromUnsignedBigInt(protocolSwapFee),
        ethereum.Value.fromBytes(userData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ConvergentCurvePool__onExitPoolResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray()
      )
    );
  }

  onJoinPool(
    poolId: Bytes,
    param1: Address,
    recipient: Address,
    currentBalances: Array<BigInt>,
    param4: BigInt,
    protocolSwapFee: BigInt,
    userData: Bytes
  ): ConvergentCurvePool__onJoinPoolResult {
    let result = super.call(
      "onJoinPool",
      "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256[],uint256[])",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigIntArray(currentBalances),
        ethereum.Value.fromUnsignedBigInt(param4),
        ethereum.Value.fromUnsignedBigInt(protocolSwapFee),
        ethereum.Value.fromBytes(userData)
      ]
    );

    return new ConvergentCurvePool__onJoinPoolResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray()
    );
  }

  try_onJoinPool(
    poolId: Bytes,
    param1: Address,
    recipient: Address,
    currentBalances: Array<BigInt>,
    param4: BigInt,
    protocolSwapFee: BigInt,
    userData: Bytes
  ): ethereum.CallResult<ConvergentCurvePool__onJoinPoolResult> {
    let result = super.tryCall(
      "onJoinPool",
      "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256[],uint256[])",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigIntArray(currentBalances),
        ethereum.Value.fromUnsignedBigInt(param4),
        ethereum.Value.fromUnsignedBigInt(protocolSwapFee),
        ethereum.Value.fromBytes(userData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ConvergentCurvePool__onJoinPoolResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray()
      )
    );
  }

  onSwap(
    swapRequest: ConvergentCurvePool__onSwapInputSwapRequestStruct,
    currentBalanceTokenIn: BigInt,
    currentBalanceTokenOut: BigInt
  ): BigInt {
    let result = super.call(
      "onSwap",
      "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256,uint256):(uint256)",
      [
        ethereum.Value.fromTuple(swapRequest),
        ethereum.Value.fromUnsignedBigInt(currentBalanceTokenIn),
        ethereum.Value.fromUnsignedBigInt(currentBalanceTokenOut)
      ]
    );

    return result[0].toBigInt();
  }

  try_onSwap(
    swapRequest: ConvergentCurvePool__onSwapInputSwapRequestStruct,
    currentBalanceTokenIn: BigInt,
    currentBalanceTokenOut: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "onSwap",
      "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256,uint256):(uint256)",
      [
        ethereum.Value.fromTuple(swapRequest),
        ethereum.Value.fromUnsignedBigInt(currentBalanceTokenIn),
        ethereum.Value.fromUnsignedBigInt(currentBalanceTokenOut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  percentFee(): BigInt {
    let result = super.call("percentFee", "percentFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_percentFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("percentFee", "percentFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  percentFeeGov(): BigInt {
    let result = super.call("percentFeeGov", "percentFeeGov():(uint256)", []);

    return result[0].toBigInt();
  }

  try_percentFeeGov(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "percentFeeGov",
      "percentFeeGov():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  solveTradeInvariant(
    amountX: BigInt,
    reserveX: BigInt,
    reserveY: BigInt,
    out: boolean
  ): BigInt {
    let result = super.call(
      "solveTradeInvariant",
      "solveTradeInvariant(uint256,uint256,uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountX),
        ethereum.Value.fromUnsignedBigInt(reserveX),
        ethereum.Value.fromUnsignedBigInt(reserveY),
        ethereum.Value.fromBoolean(out)
      ]
    );

    return result[0].toBigInt();
  }

  try_solveTradeInvariant(
    amountX: BigInt,
    reserveX: BigInt,
    reserveY: BigInt,
    out: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "solveTradeInvariant",
      "solveTradeInvariant(uint256,uint256,uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountX),
        ethereum.Value.fromUnsignedBigInt(reserveX),
        ethereum.Value.fromUnsignedBigInt(reserveY),
        ethereum.Value.fromBoolean(out)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  underlying(): Address {
    let result = super.call("underlying", "underlying():(address)", []);

    return result[0].toAddress();
  }

  try_underlying(): ethereum.CallResult<Address> {
    let result = super.tryCall("underlying", "underlying():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  underlyingDecimals(): i32 {
    let result = super.call(
      "underlyingDecimals",
      "underlyingDecimals():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_underlyingDecimals(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "underlyingDecimals",
      "underlyingDecimals():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  unitSeconds(): BigInt {
    let result = super.call("unitSeconds", "unitSeconds():(uint256)", []);

    return result[0].toBigInt();
  }

  try_unitSeconds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("unitSeconds", "unitSeconds():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _underlying(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _bond(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _expiration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _unitSeconds(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get vault(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _percentFee(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _percentFeeGov(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _governance(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get name(): string {
    return this._call.inputValues[8].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[9].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseApprovalCall extends ethereum.Call {
  get inputs(): DecreaseApprovalCall__Inputs {
    return new DecreaseApprovalCall__Inputs(this);
  }

  get outputs(): DecreaseApprovalCall__Outputs {
    return new DecreaseApprovalCall__Outputs(this);
  }
}

export class DecreaseApprovalCall__Inputs {
  _call: DecreaseApprovalCall;

  constructor(call: DecreaseApprovalCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseApprovalCall__Outputs {
  _call: DecreaseApprovalCall;

  constructor(call: DecreaseApprovalCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseApprovalCall extends ethereum.Call {
  get inputs(): IncreaseApprovalCall__Inputs {
    return new IncreaseApprovalCall__Inputs(this);
  }

  get outputs(): IncreaseApprovalCall__Outputs {
    return new IncreaseApprovalCall__Outputs(this);
  }
}

export class IncreaseApprovalCall__Inputs {
  _call: IncreaseApprovalCall;

  constructor(call: IncreaseApprovalCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseApprovalCall__Outputs {
  _call: IncreaseApprovalCall;

  constructor(call: IncreaseApprovalCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class OnExitPoolCall extends ethereum.Call {
  get inputs(): OnExitPoolCall__Inputs {
    return new OnExitPoolCall__Inputs(this);
  }

  get outputs(): OnExitPoolCall__Outputs {
    return new OnExitPoolCall__Outputs(this);
  }
}

export class OnExitPoolCall__Inputs {
  _call: OnExitPoolCall;

  constructor(call: OnExitPoolCall) {
    this._call = call;
  }

  get poolId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get currentBalances(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get protocolSwapFee(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get userData(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class OnExitPoolCall__Outputs {
  _call: OnExitPoolCall;

  constructor(call: OnExitPoolCall) {
    this._call = call;
  }

  get amountsOut(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }

  get dueProtocolFeeAmounts(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class OnJoinPoolCall extends ethereum.Call {
  get inputs(): OnJoinPoolCall__Inputs {
    return new OnJoinPoolCall__Inputs(this);
  }

  get outputs(): OnJoinPoolCall__Outputs {
    return new OnJoinPoolCall__Outputs(this);
  }
}

export class OnJoinPoolCall__Inputs {
  _call: OnJoinPoolCall;

  constructor(call: OnJoinPoolCall) {
    this._call = call;
  }

  get poolId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get currentBalances(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get protocolSwapFee(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get userData(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class OnJoinPoolCall__Outputs {
  _call: OnJoinPoolCall;

  constructor(call: OnJoinPoolCall) {
    this._call = call;
  }

  get amountsIn(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }

  get dueProtocolFeeAmounts(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class OnSwapCall extends ethereum.Call {
  get inputs(): OnSwapCall__Inputs {
    return new OnSwapCall__Inputs(this);
  }

  get outputs(): OnSwapCall__Outputs {
    return new OnSwapCall__Outputs(this);
  }
}

export class OnSwapCall__Inputs {
  _call: OnSwapCall;

  constructor(call: OnSwapCall) {
    this._call = call;
  }

  get swapRequest(): OnSwapCallSwapRequestStruct {
    return changetype<OnSwapCallSwapRequestStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get currentBalanceTokenIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get currentBalanceTokenOut(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class OnSwapCall__Outputs {
  _call: OnSwapCall;

  constructor(call: OnSwapCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class OnSwapCallSwapRequestStruct extends ethereum.Tuple {
  get kind(): i32 {
    return this[0].toI32();
  }

  get tokenIn(): Address {
    return this[1].toAddress();
  }

  get tokenOut(): Address {
    return this[2].toAddress();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get poolId(): Bytes {
    return this[4].toBytes();
  }

  get lastChangeBlock(): BigInt {
    return this[5].toBigInt();
  }

  get from(): Address {
    return this[6].toAddress();
  }

  get to(): Address {
    return this[7].toAddress();
  }

  get userData(): Bytes {
    return this[8].toBytes();
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
