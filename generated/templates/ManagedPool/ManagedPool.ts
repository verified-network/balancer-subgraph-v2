// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AllowlistAddressAdded extends ethereum.Event {
  get params(): AllowlistAddressAdded__Params {
    return new AllowlistAddressAdded__Params(this);
  }
}

export class AllowlistAddressAdded__Params {
  _event: AllowlistAddressAdded;

  constructor(event: AllowlistAddressAdded) {
    this._event = event;
  }

  get member(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AllowlistAddressRemoved extends ethereum.Event {
  get params(): AllowlistAddressRemoved__Params {
    return new AllowlistAddressRemoved__Params(this);
  }
}

export class AllowlistAddressRemoved__Params {
  _event: AllowlistAddressRemoved;

  constructor(event: AllowlistAddressRemoved) {
    this._event = event;
  }

  get member(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CircuitBreakerSet extends ethereum.Event {
  get params(): CircuitBreakerSet__Params {
    return new CircuitBreakerSet__Params(this);
  }
}

export class CircuitBreakerSet__Params {
  _event: CircuitBreakerSet;

  constructor(event: CircuitBreakerSet) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bptPrice(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lowerBoundPercentage(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get upperBoundPercentage(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class GradualSwapFeeUpdateScheduled extends ethereum.Event {
  get params(): GradualSwapFeeUpdateScheduled__Params {
    return new GradualSwapFeeUpdateScheduled__Params(this);
  }
}

export class GradualSwapFeeUpdateScheduled__Params {
  _event: GradualSwapFeeUpdateScheduled;

  constructor(event: GradualSwapFeeUpdateScheduled) {
    this._event = event;
  }

  get startTime(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get startSwapFeePercentage(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get endSwapFeePercentage(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class GradualWeightUpdateScheduled extends ethereum.Event {
  get params(): GradualWeightUpdateScheduled__Params {
    return new GradualWeightUpdateScheduled__Params(this);
  }
}

export class GradualWeightUpdateScheduled__Params {
  _event: GradualWeightUpdateScheduled;

  constructor(event: GradualWeightUpdateScheduled) {
    this._event = event;
  }

  get startTime(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get startWeights(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get endWeights(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }
}

export class JoinExitEnabledSet extends ethereum.Event {
  get params(): JoinExitEnabledSet__Params {
    return new JoinExitEnabledSet__Params(this);
  }
}

export class JoinExitEnabledSet__Params {
  _event: JoinExitEnabledSet;

  constructor(event: JoinExitEnabledSet) {
    this._event = event;
  }

  get joinExitEnabled(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class ManagementAumFeeCollected extends ethereum.Event {
  get params(): ManagementAumFeeCollected__Params {
    return new ManagementAumFeeCollected__Params(this);
  }
}

export class ManagementAumFeeCollected__Params {
  _event: ManagementAumFeeCollected;

  constructor(event: ManagementAumFeeCollected) {
    this._event = event;
  }

  get bptAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ManagementAumFeePercentageChanged extends ethereum.Event {
  get params(): ManagementAumFeePercentageChanged__Params {
    return new ManagementAumFeePercentageChanged__Params(this);
  }
}

export class ManagementAumFeePercentageChanged__Params {
  _event: ManagementAumFeePercentageChanged;

  constructor(event: ManagementAumFeePercentageChanged) {
    this._event = event;
  }

  get managementAumFeePercentage(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MustAllowlistLPsSet extends ethereum.Event {
  get params(): MustAllowlistLPsSet__Params {
    return new MustAllowlistLPsSet__Params(this);
  }
}

export class MustAllowlistLPsSet__Params {
  _event: MustAllowlistLPsSet;

  constructor(event: MustAllowlistLPsSet) {
    this._event = event;
  }

  get mustAllowlistLPs(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class PausedStateChanged extends ethereum.Event {
  get params(): PausedStateChanged__Params {
    return new PausedStateChanged__Params(this);
  }
}

export class PausedStateChanged__Params {
  _event: PausedStateChanged;

  constructor(event: PausedStateChanged) {
    this._event = event;
  }

  get paused(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class ProtocolFeePercentageCacheUpdated extends ethereum.Event {
  get params(): ProtocolFeePercentageCacheUpdated__Params {
    return new ProtocolFeePercentageCacheUpdated__Params(this);
  }
}

export class ProtocolFeePercentageCacheUpdated__Params {
  _event: ProtocolFeePercentageCacheUpdated;

  constructor(event: ProtocolFeePercentageCacheUpdated) {
    this._event = event;
  }

  get feeCache(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class RecoveryModeStateChanged extends ethereum.Event {
  get params(): RecoveryModeStateChanged__Params {
    return new RecoveryModeStateChanged__Params(this);
  }
}

export class RecoveryModeStateChanged__Params {
  _event: RecoveryModeStateChanged;

  constructor(event: RecoveryModeStateChanged) {
    this._event = event;
  }

  get enabled(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class SwapEnabledSet extends ethereum.Event {
  get params(): SwapEnabledSet__Params {
    return new SwapEnabledSet__Params(this);
  }
}

export class SwapEnabledSet__Params {
  _event: SwapEnabledSet;

  constructor(event: SwapEnabledSet) {
    this._event = event;
  }

  get swapEnabled(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class TokenAdded extends ethereum.Event {
  get params(): TokenAdded__Params {
    return new TokenAdded__Params(this);
  }
}

export class TokenAdded__Params {
  _event: TokenAdded;

  constructor(event: TokenAdded) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get normalizedWeight(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TokenRemoved extends ethereum.Event {
  get params(): TokenRemoved__Params {
    return new TokenRemoved__Params(this);
  }
}

export class TokenRemoved__Params {
  _event: TokenRemoved;

  constructor(event: TokenRemoved) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ManagedPool__getCircuitBreakerStateResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class ManagedPool__getGradualSwapFeeUpdateParamsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class ManagedPool__getGradualWeightUpdateParamsResult {
  value0: BigInt;
  value1: BigInt;
  value2: Array<BigInt>;
  value3: Array<BigInt>;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: Array<BigInt>,
    value3: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigIntArray(this.value3));
    return map;
  }
}

export class ManagedPool__getManagementAumFeeParamsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ManagedPool__getPausedStateResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: boolean, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class ManagedPool__onExitPoolResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class ManagedPool__onJoinPoolResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class ManagedPool__onSwapInputRequestStruct extends ethereum.Tuple {
  get kind(): i32 {
    return this[0].toI32();
  }

  get tokenIn(): Address {
    return this[1].toAddress();
  }

  get tokenOut(): Address {
    return this[2].toAddress();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get poolId(): Bytes {
    return this[4].toBytes();
  }

  get lastChangeBlock(): BigInt {
    return this[5].toBigInt();
  }

  get from(): Address {
    return this[6].toAddress();
  }

  get to(): Address {
    return this[7].toAddress();
  }

  get userData(): Bytes {
    return this[8].toBytes();
  }
}

export class ManagedPool__onSwap1InputRequestStruct extends ethereum.Tuple {
  get kind(): i32 {
    return this[0].toI32();
  }

  get tokenIn(): Address {
    return this[1].toAddress();
  }

  get tokenOut(): Address {
    return this[2].toAddress();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get poolId(): Bytes {
    return this[4].toBytes();
  }

  get lastChangeBlock(): BigInt {
    return this[5].toBigInt();
  }

  get from(): Address {
    return this[6].toAddress();
  }

  get to(): Address {
    return this[7].toAddress();
  }

  get userData(): Bytes {
    return this[8].toBytes();
  }
}

export class ManagedPool__queryExitResult {
  value0: BigInt;
  value1: Array<BigInt>;

  constructor(value0: BigInt, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class ManagedPool__queryJoinResult {
  value0: BigInt;
  value1: Array<BigInt>;

  constructor(value0: BigInt, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class ManagedPool extends ethereum.SmartContract {
  static bind(address: Address): ManagedPool {
    return new ManagedPool("ManagedPool", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collectAumManagementFees(): BigInt {
    let result = super.call(
      "collectAumManagementFees",
      "collectAumManagementFees():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_collectAumManagementFees(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collectAumManagementFees",
      "collectAumManagementFees():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, amount: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getActionId(selector: Bytes): Bytes {
    let result = super.call("getActionId", "getActionId(bytes4):(bytes32)", [
      ethereum.Value.fromFixedBytes(selector)
    ]);

    return result[0].toBytes();
  }

  try_getActionId(selector: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getActionId", "getActionId(bytes4):(bytes32)", [
      ethereum.Value.fromFixedBytes(selector)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getActualSupply(): BigInt {
    let result = super.call(
      "getActualSupply",
      "getActualSupply():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getActualSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getActualSupply",
      "getActualSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAuthorizer(): Address {
    let result = super.call("getAuthorizer", "getAuthorizer():(address)", []);

    return result[0].toAddress();
  }

  try_getAuthorizer(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAuthorizer",
      "getAuthorizer():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCircuitBreakerState(
    token: Address
  ): ManagedPool__getCircuitBreakerStateResult {
    let result = super.call(
      "getCircuitBreakerState",
      "getCircuitBreakerState(address):(uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return new ManagedPool__getCircuitBreakerStateResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_getCircuitBreakerState(
    token: Address
  ): ethereum.CallResult<ManagedPool__getCircuitBreakerStateResult> {
    let result = super.tryCall(
      "getCircuitBreakerState",
      "getCircuitBreakerState(address):(uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ManagedPool__getCircuitBreakerStateResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  getDomainSeparator(): Bytes {
    let result = super.call(
      "getDomainSeparator",
      "getDomainSeparator():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_getDomainSeparator(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getDomainSeparator",
      "getDomainSeparator():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getGradualSwapFeeUpdateParams(): ManagedPool__getGradualSwapFeeUpdateParamsResult {
    let result = super.call(
      "getGradualSwapFeeUpdateParams",
      "getGradualSwapFeeUpdateParams():(uint256,uint256,uint256,uint256)",
      []
    );

    return new ManagedPool__getGradualSwapFeeUpdateParamsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getGradualSwapFeeUpdateParams(): ethereum.CallResult<
    ManagedPool__getGradualSwapFeeUpdateParamsResult
  > {
    let result = super.tryCall(
      "getGradualSwapFeeUpdateParams",
      "getGradualSwapFeeUpdateParams():(uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ManagedPool__getGradualSwapFeeUpdateParamsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getGradualWeightUpdateParams(): ManagedPool__getGradualWeightUpdateParamsResult {
    let result = super.call(
      "getGradualWeightUpdateParams",
      "getGradualWeightUpdateParams():(uint256,uint256,uint256[],uint256[])",
      []
    );

    return new ManagedPool__getGradualWeightUpdateParamsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigIntArray(),
      result[3].toBigIntArray()
    );
  }

  try_getGradualWeightUpdateParams(): ethereum.CallResult<
    ManagedPool__getGradualWeightUpdateParamsResult
  > {
    let result = super.tryCall(
      "getGradualWeightUpdateParams",
      "getGradualWeightUpdateParams():(uint256,uint256,uint256[],uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ManagedPool__getGradualWeightUpdateParamsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigIntArray(),
        value[3].toBigIntArray()
      )
    );
  }

  getJoinExitEnabled(): boolean {
    let result = super.call(
      "getJoinExitEnabled",
      "getJoinExitEnabled():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_getJoinExitEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getJoinExitEnabled",
      "getJoinExitEnabled():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getManagementAumFeeParams(): ManagedPool__getManagementAumFeeParamsResult {
    let result = super.call(
      "getManagementAumFeeParams",
      "getManagementAumFeeParams():(uint256,uint256)",
      []
    );

    return new ManagedPool__getManagementAumFeeParamsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getManagementAumFeeParams(): ethereum.CallResult<
    ManagedPool__getManagementAumFeeParamsResult
  > {
    let result = super.tryCall(
      "getManagementAumFeeParams",
      "getManagementAumFeeParams():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ManagedPool__getManagementAumFeeParamsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getMustAllowlistLPs(): boolean {
    let result = super.call(
      "getMustAllowlistLPs",
      "getMustAllowlistLPs():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_getMustAllowlistLPs(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getMustAllowlistLPs",
      "getMustAllowlistLPs():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getNextNonce(account: Address): BigInt {
    let result = super.call("getNextNonce", "getNextNonce(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_getNextNonce(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNextNonce",
      "getNextNonce(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNormalizedWeights(): Array<BigInt> {
    let result = super.call(
      "getNormalizedWeights",
      "getNormalizedWeights():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getNormalizedWeights(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getNormalizedWeights",
      "getNormalizedWeights():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getOwner(): Address {
    let result = super.call("getOwner", "getOwner():(address)", []);

    return result[0].toAddress();
  }

  try_getOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("getOwner", "getOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPausedState(): ManagedPool__getPausedStateResult {
    let result = super.call(
      "getPausedState",
      "getPausedState():(bool,uint256,uint256)",
      []
    );

    return new ManagedPool__getPausedStateResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getPausedState(): ethereum.CallResult<ManagedPool__getPausedStateResult> {
    let result = super.tryCall(
      "getPausedState",
      "getPausedState():(bool,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ManagedPool__getPausedStateResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getPoolId(): Bytes {
    let result = super.call("getPoolId", "getPoolId():(bytes32)", []);

    return result[0].toBytes();
  }

  try_getPoolId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getPoolId", "getPoolId():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getProtocolFeePercentageCache(feeType: BigInt): BigInt {
    let result = super.call(
      "getProtocolFeePercentageCache",
      "getProtocolFeePercentageCache(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(feeType)]
    );

    return result[0].toBigInt();
  }

  try_getProtocolFeePercentageCache(
    feeType: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProtocolFeePercentageCache",
      "getProtocolFeePercentageCache(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(feeType)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProtocolFeesCollector(): Address {
    let result = super.call(
      "getProtocolFeesCollector",
      "getProtocolFeesCollector():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getProtocolFeesCollector(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getProtocolFeesCollector",
      "getProtocolFeesCollector():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getProviderFeeId(feeType: BigInt): BigInt {
    let result = super.call(
      "getProviderFeeId",
      "getProviderFeeId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(feeType)]
    );

    return result[0].toBigInt();
  }

  try_getProviderFeeId(feeType: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProviderFeeId",
      "getProviderFeeId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(feeType)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getScalingFactors(): Array<BigInt> {
    let result = super.call(
      "getScalingFactors",
      "getScalingFactors():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getScalingFactors(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getScalingFactors",
      "getScalingFactors():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getSwapEnabled(): boolean {
    let result = super.call("getSwapEnabled", "getSwapEnabled():(bool)", []);

    return result[0].toBoolean();
  }

  try_getSwapEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall("getSwapEnabled", "getSwapEnabled():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getSwapFeePercentage(): BigInt {
    let result = super.call(
      "getSwapFeePercentage",
      "getSwapFeePercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getSwapFeePercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSwapFeePercentage",
      "getSwapFeePercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVault(): Address {
    let result = super.call("getVault", "getVault():(address)", []);

    return result[0].toAddress();
  }

  try_getVault(): ethereum.CallResult<Address> {
    let result = super.tryCall("getVault", "getVault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  inRecoveryMode(): boolean {
    let result = super.call("inRecoveryMode", "inRecoveryMode():(bool)", []);

    return result[0].toBoolean();
  }

  try_inRecoveryMode(): ethereum.CallResult<boolean> {
    let result = super.tryCall("inRecoveryMode", "inRecoveryMode():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isAddressOnAllowlist(member: Address): boolean {
    let result = super.call(
      "isAddressOnAllowlist",
      "isAddressOnAllowlist(address):(bool)",
      [ethereum.Value.fromAddress(member)]
    );

    return result[0].toBoolean();
  }

  try_isAddressOnAllowlist(member: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAddressOnAllowlist",
      "isAddressOnAllowlist(address):(bool)",
      [ethereum.Value.fromAddress(member)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(owner: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onExitPool(
    poolId: Bytes,
    sender: Address,
    param2: Address,
    balances: Array<BigInt>,
    param4: BigInt,
    param5: BigInt,
    userData: Bytes
  ): ManagedPool__onExitPoolResult {
    let result = super.call(
      "onExitPool",
      "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256[],uint256[])",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(param2),
        ethereum.Value.fromUnsignedBigIntArray(balances),
        ethereum.Value.fromUnsignedBigInt(param4),
        ethereum.Value.fromUnsignedBigInt(param5),
        ethereum.Value.fromBytes(userData)
      ]
    );

    return new ManagedPool__onExitPoolResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray()
    );
  }

  try_onExitPool(
    poolId: Bytes,
    sender: Address,
    param2: Address,
    balances: Array<BigInt>,
    param4: BigInt,
    param5: BigInt,
    userData: Bytes
  ): ethereum.CallResult<ManagedPool__onExitPoolResult> {
    let result = super.tryCall(
      "onExitPool",
      "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256[],uint256[])",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(param2),
        ethereum.Value.fromUnsignedBigIntArray(balances),
        ethereum.Value.fromUnsignedBigInt(param4),
        ethereum.Value.fromUnsignedBigInt(param5),
        ethereum.Value.fromBytes(userData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ManagedPool__onExitPoolResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray()
      )
    );
  }

  onJoinPool(
    poolId: Bytes,
    sender: Address,
    recipient: Address,
    balances: Array<BigInt>,
    param4: BigInt,
    param5: BigInt,
    userData: Bytes
  ): ManagedPool__onJoinPoolResult {
    let result = super.call(
      "onJoinPool",
      "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256[],uint256[])",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigIntArray(balances),
        ethereum.Value.fromUnsignedBigInt(param4),
        ethereum.Value.fromUnsignedBigInt(param5),
        ethereum.Value.fromBytes(userData)
      ]
    );

    return new ManagedPool__onJoinPoolResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray()
    );
  }

  try_onJoinPool(
    poolId: Bytes,
    sender: Address,
    recipient: Address,
    balances: Array<BigInt>,
    param4: BigInt,
    param5: BigInt,
    userData: Bytes
  ): ethereum.CallResult<ManagedPool__onJoinPoolResult> {
    let result = super.tryCall(
      "onJoinPool",
      "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256[],uint256[])",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigIntArray(balances),
        ethereum.Value.fromUnsignedBigInt(param4),
        ethereum.Value.fromUnsignedBigInt(param5),
        ethereum.Value.fromBytes(userData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ManagedPool__onJoinPoolResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray()
      )
    );
  }

  onSwap(
    request: ManagedPool__onSwapInputRequestStruct,
    balances: Array<BigInt>,
    indexIn: BigInt,
    indexOut: BigInt
  ): BigInt {
    let result = super.call(
      "onSwap",
      "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256[],uint256,uint256):(uint256)",
      [
        ethereum.Value.fromTuple(request),
        ethereum.Value.fromUnsignedBigIntArray(balances),
        ethereum.Value.fromUnsignedBigInt(indexIn),
        ethereum.Value.fromUnsignedBigInt(indexOut)
      ]
    );

    return result[0].toBigInt();
  }

  try_onSwap(
    request: ManagedPool__onSwapInputRequestStruct,
    balances: Array<BigInt>,
    indexIn: BigInt,
    indexOut: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "onSwap",
      "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256[],uint256,uint256):(uint256)",
      [
        ethereum.Value.fromTuple(request),
        ethereum.Value.fromUnsignedBigIntArray(balances),
        ethereum.Value.fromUnsignedBigInt(indexIn),
        ethereum.Value.fromUnsignedBigInt(indexOut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onSwap1(
    request: ManagedPool__onSwap1InputRequestStruct,
    balanceTokenIn: BigInt,
    balanceTokenOut: BigInt
  ): BigInt {
    let result = super.call(
      "onSwap",
      "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256,uint256):(uint256)",
      [
        ethereum.Value.fromTuple(request),
        ethereum.Value.fromUnsignedBigInt(balanceTokenIn),
        ethereum.Value.fromUnsignedBigInt(balanceTokenOut)
      ]
    );

    return result[0].toBigInt();
  }

  try_onSwap1(
    request: ManagedPool__onSwap1InputRequestStruct,
    balanceTokenIn: BigInt,
    balanceTokenOut: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "onSwap",
      "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256,uint256):(uint256)",
      [
        ethereum.Value.fromTuple(request),
        ethereum.Value.fromUnsignedBigInt(balanceTokenIn),
        ethereum.Value.fromUnsignedBigInt(balanceTokenOut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  queryExit(
    param0: Bytes,
    sender: Address,
    param2: Address,
    balances: Array<BigInt>,
    param4: BigInt,
    param5: BigInt,
    userData: Bytes
  ): ManagedPool__queryExitResult {
    let result = super.call(
      "queryExit",
      "queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256,uint256[])",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(param2),
        ethereum.Value.fromUnsignedBigIntArray(balances),
        ethereum.Value.fromUnsignedBigInt(param4),
        ethereum.Value.fromUnsignedBigInt(param5),
        ethereum.Value.fromBytes(userData)
      ]
    );

    return new ManagedPool__queryExitResult(
      result[0].toBigInt(),
      result[1].toBigIntArray()
    );
  }

  try_queryExit(
    param0: Bytes,
    sender: Address,
    param2: Address,
    balances: Array<BigInt>,
    param4: BigInt,
    param5: BigInt,
    userData: Bytes
  ): ethereum.CallResult<ManagedPool__queryExitResult> {
    let result = super.tryCall(
      "queryExit",
      "queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256,uint256[])",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(param2),
        ethereum.Value.fromUnsignedBigIntArray(balances),
        ethereum.Value.fromUnsignedBigInt(param4),
        ethereum.Value.fromUnsignedBigInt(param5),
        ethereum.Value.fromBytes(userData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ManagedPool__queryExitResult(
        value[0].toBigInt(),
        value[1].toBigIntArray()
      )
    );
  }

  queryJoin(
    param0: Bytes,
    sender: Address,
    param2: Address,
    balances: Array<BigInt>,
    param4: BigInt,
    param5: BigInt,
    userData: Bytes
  ): ManagedPool__queryJoinResult {
    let result = super.call(
      "queryJoin",
      "queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256,uint256[])",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(param2),
        ethereum.Value.fromUnsignedBigIntArray(balances),
        ethereum.Value.fromUnsignedBigInt(param4),
        ethereum.Value.fromUnsignedBigInt(param5),
        ethereum.Value.fromBytes(userData)
      ]
    );

    return new ManagedPool__queryJoinResult(
      result[0].toBigInt(),
      result[1].toBigIntArray()
    );
  }

  try_queryJoin(
    param0: Bytes,
    sender: Address,
    param2: Address,
    balances: Array<BigInt>,
    param4: BigInt,
    param5: BigInt,
    userData: Bytes
  ): ethereum.CallResult<ManagedPool__queryJoinResult> {
    let result = super.tryCall(
      "queryJoin",
      "queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256,uint256[])",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(param2),
        ethereum.Value.fromUnsignedBigIntArray(balances),
        ethereum.Value.fromUnsignedBigInt(param4),
        ethereum.Value.fromUnsignedBigInt(param5),
        ethereum.Value.fromBytes(userData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ManagedPool__queryJoinResult(
        value[0].toBigInt(),
        value[1].toBigIntArray()
      )
    );
  }

  setManagementAumFeePercentage(managementAumFeePercentage: BigInt): BigInt {
    let result = super.call(
      "setManagementAumFeePercentage",
      "setManagementAumFeePercentage(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(managementAumFeePercentage)]
    );

    return result[0].toBigInt();
  }

  try_setManagementAumFeePercentage(
    managementAumFeePercentage: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "setManagementAumFeePercentage",
      "setManagementAumFeePercentage(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(managementAumFeePercentage)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get params(): ConstructorCallParamsStruct {
    return changetype<ConstructorCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get configParams(): ConstructorCallConfigParamsStruct {
    return changetype<ConstructorCallConfigParamsStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get settingsParams(): ConstructorCallSettingsParamsStruct {
    return changetype<ConstructorCallSettingsParamsStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }

  get owner(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCallParamsStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get symbol(): string {
    return this[1].toString();
  }

  get assetManagers(): Array<Address> {
    return this[2].toAddressArray();
  }
}

export class ConstructorCallConfigParamsStruct extends ethereum.Tuple {
  get vault(): Address {
    return this[0].toAddress();
  }

  get protocolFeeProvider(): Address {
    return this[1].toAddress();
  }

  get weightedMath(): Address {
    return this[2].toAddress();
  }

  get recoveryModeHelper(): Address {
    return this[3].toAddress();
  }

  get pauseWindowDuration(): BigInt {
    return this[4].toBigInt();
  }

  get bufferPeriodDuration(): BigInt {
    return this[5].toBigInt();
  }

  get version(): string {
    return this[6].toString();
  }
}

export class ConstructorCallSettingsParamsStruct extends ethereum.Tuple {
  get tokens(): Array<Address> {
    return this[0].toAddressArray();
  }

  get normalizedWeights(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get swapFeePercentage(): BigInt {
    return this[2].toBigInt();
  }

  get swapEnabledOnStart(): boolean {
    return this[3].toBoolean();
  }

  get mustAllowlistLPs(): boolean {
    return this[4].toBoolean();
  }

  get managementAumFeePercentage(): BigInt {
    return this[5].toBigInt();
  }

  get aumFeeId(): BigInt {
    return this[6].toBigInt();
  }
}

export class AddAllowedAddressCall extends ethereum.Call {
  get inputs(): AddAllowedAddressCall__Inputs {
    return new AddAllowedAddressCall__Inputs(this);
  }

  get outputs(): AddAllowedAddressCall__Outputs {
    return new AddAllowedAddressCall__Outputs(this);
  }
}

export class AddAllowedAddressCall__Inputs {
  _call: AddAllowedAddressCall;

  constructor(call: AddAllowedAddressCall) {
    this._call = call;
  }

  get member(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAllowedAddressCall__Outputs {
  _call: AddAllowedAddressCall;

  constructor(call: AddAllowedAddressCall) {
    this._call = call;
  }
}

export class AddTokenCall extends ethereum.Call {
  get inputs(): AddTokenCall__Inputs {
    return new AddTokenCall__Inputs(this);
  }

  get outputs(): AddTokenCall__Outputs {
    return new AddTokenCall__Outputs(this);
  }
}

export class AddTokenCall__Inputs {
  _call: AddTokenCall;

  constructor(call: AddTokenCall) {
    this._call = call;
  }

  get tokenToAdd(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get assetManager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenToAddNormalizedWeight(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get mintAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class AddTokenCall__Outputs {
  _call: AddTokenCall;

  constructor(call: AddTokenCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CollectAumManagementFeesCall extends ethereum.Call {
  get inputs(): CollectAumManagementFeesCall__Inputs {
    return new CollectAumManagementFeesCall__Inputs(this);
  }

  get outputs(): CollectAumManagementFeesCall__Outputs {
    return new CollectAumManagementFeesCall__Outputs(this);
  }
}

export class CollectAumManagementFeesCall__Inputs {
  _call: CollectAumManagementFeesCall;

  constructor(call: CollectAumManagementFeesCall) {
    this._call = call;
  }
}

export class CollectAumManagementFeesCall__Outputs {
  _call: CollectAumManagementFeesCall;

  constructor(call: CollectAumManagementFeesCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DisableRecoveryModeCall extends ethereum.Call {
  get inputs(): DisableRecoveryModeCall__Inputs {
    return new DisableRecoveryModeCall__Inputs(this);
  }

  get outputs(): DisableRecoveryModeCall__Outputs {
    return new DisableRecoveryModeCall__Outputs(this);
  }
}

export class DisableRecoveryModeCall__Inputs {
  _call: DisableRecoveryModeCall;

  constructor(call: DisableRecoveryModeCall) {
    this._call = call;
  }
}

export class DisableRecoveryModeCall__Outputs {
  _call: DisableRecoveryModeCall;

  constructor(call: DisableRecoveryModeCall) {
    this._call = call;
  }
}

export class EnableRecoveryModeCall extends ethereum.Call {
  get inputs(): EnableRecoveryModeCall__Inputs {
    return new EnableRecoveryModeCall__Inputs(this);
  }

  get outputs(): EnableRecoveryModeCall__Outputs {
    return new EnableRecoveryModeCall__Outputs(this);
  }
}

export class EnableRecoveryModeCall__Inputs {
  _call: EnableRecoveryModeCall;

  constructor(call: EnableRecoveryModeCall) {
    this._call = call;
  }
}

export class EnableRecoveryModeCall__Outputs {
  _call: EnableRecoveryModeCall;

  constructor(call: EnableRecoveryModeCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class OnExitPoolCall extends ethereum.Call {
  get inputs(): OnExitPoolCall__Inputs {
    return new OnExitPoolCall__Inputs(this);
  }

  get outputs(): OnExitPoolCall__Outputs {
    return new OnExitPoolCall__Outputs(this);
  }
}

export class OnExitPoolCall__Inputs {
  _call: OnExitPoolCall;

  constructor(call: OnExitPoolCall) {
    this._call = call;
  }

  get poolId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get sender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get balances(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get value5(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get userData(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class OnExitPoolCall__Outputs {
  _call: OnExitPoolCall;

  constructor(call: OnExitPoolCall) {
    this._call = call;
  }

  get amountsOut(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }

  get dueProtocolFees(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class OnJoinPoolCall extends ethereum.Call {
  get inputs(): OnJoinPoolCall__Inputs {
    return new OnJoinPoolCall__Inputs(this);
  }

  get outputs(): OnJoinPoolCall__Outputs {
    return new OnJoinPoolCall__Outputs(this);
  }
}

export class OnJoinPoolCall__Inputs {
  _call: OnJoinPoolCall;

  constructor(call: OnJoinPoolCall) {
    this._call = call;
  }

  get poolId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get sender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get balances(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get value5(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get userData(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class OnJoinPoolCall__Outputs {
  _call: OnJoinPoolCall;

  constructor(call: OnJoinPoolCall) {
    this._call = call;
  }

  get amountsIn(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }

  get dueProtocolFees(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class OnSwapCall extends ethereum.Call {
  get inputs(): OnSwapCall__Inputs {
    return new OnSwapCall__Inputs(this);
  }

  get outputs(): OnSwapCall__Outputs {
    return new OnSwapCall__Outputs(this);
  }
}

export class OnSwapCall__Inputs {
  _call: OnSwapCall;

  constructor(call: OnSwapCall) {
    this._call = call;
  }

  get request(): OnSwapCallRequestStruct {
    return changetype<OnSwapCallRequestStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get balances(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get indexIn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get indexOut(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class OnSwapCall__Outputs {
  _call: OnSwapCall;

  constructor(call: OnSwapCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class OnSwapCallRequestStruct extends ethereum.Tuple {
  get kind(): i32 {
    return this[0].toI32();
  }

  get tokenIn(): Address {
    return this[1].toAddress();
  }

  get tokenOut(): Address {
    return this[2].toAddress();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get poolId(): Bytes {
    return this[4].toBytes();
  }

  get lastChangeBlock(): BigInt {
    return this[5].toBigInt();
  }

  get from(): Address {
    return this[6].toAddress();
  }

  get to(): Address {
    return this[7].toAddress();
  }

  get userData(): Bytes {
    return this[8].toBytes();
  }
}

export class OnSwap1Call extends ethereum.Call {
  get inputs(): OnSwap1Call__Inputs {
    return new OnSwap1Call__Inputs(this);
  }

  get outputs(): OnSwap1Call__Outputs {
    return new OnSwap1Call__Outputs(this);
  }
}

export class OnSwap1Call__Inputs {
  _call: OnSwap1Call;

  constructor(call: OnSwap1Call) {
    this._call = call;
  }

  get request(): OnSwap1CallRequestStruct {
    return changetype<OnSwap1CallRequestStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get balanceTokenIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get balanceTokenOut(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class OnSwap1Call__Outputs {
  _call: OnSwap1Call;

  constructor(call: OnSwap1Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class OnSwap1CallRequestStruct extends ethereum.Tuple {
  get kind(): i32 {
    return this[0].toI32();
  }

  get tokenIn(): Address {
    return this[1].toAddress();
  }

  get tokenOut(): Address {
    return this[2].toAddress();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get poolId(): Bytes {
    return this[4].toBytes();
  }

  get lastChangeBlock(): BigInt {
    return this[5].toBigInt();
  }

  get from(): Address {
    return this[6].toAddress();
  }

  get to(): Address {
    return this[7].toAddress();
  }

  get userData(): Bytes {
    return this[8].toBytes();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class QueryExitCall extends ethereum.Call {
  get inputs(): QueryExitCall__Inputs {
    return new QueryExitCall__Inputs(this);
  }

  get outputs(): QueryExitCall__Outputs {
    return new QueryExitCall__Outputs(this);
  }
}

export class QueryExitCall__Inputs {
  _call: QueryExitCall;

  constructor(call: QueryExitCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get sender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get balances(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get value5(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get userData(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class QueryExitCall__Outputs {
  _call: QueryExitCall;

  constructor(call: QueryExitCall) {
    this._call = call;
  }

  get bptIn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountsOut(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class QueryJoinCall extends ethereum.Call {
  get inputs(): QueryJoinCall__Inputs {
    return new QueryJoinCall__Inputs(this);
  }

  get outputs(): QueryJoinCall__Outputs {
    return new QueryJoinCall__Outputs(this);
  }
}

export class QueryJoinCall__Inputs {
  _call: QueryJoinCall;

  constructor(call: QueryJoinCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get sender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get balances(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get value5(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get userData(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class QueryJoinCall__Outputs {
  _call: QueryJoinCall;

  constructor(call: QueryJoinCall) {
    this._call = call;
  }

  get bptOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountsIn(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class RemoveAllowedAddressCall extends ethereum.Call {
  get inputs(): RemoveAllowedAddressCall__Inputs {
    return new RemoveAllowedAddressCall__Inputs(this);
  }

  get outputs(): RemoveAllowedAddressCall__Outputs {
    return new RemoveAllowedAddressCall__Outputs(this);
  }
}

export class RemoveAllowedAddressCall__Inputs {
  _call: RemoveAllowedAddressCall;

  constructor(call: RemoveAllowedAddressCall) {
    this._call = call;
  }

  get member(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveAllowedAddressCall__Outputs {
  _call: RemoveAllowedAddressCall;

  constructor(call: RemoveAllowedAddressCall) {
    this._call = call;
  }
}

export class RemoveTokenCall extends ethereum.Call {
  get inputs(): RemoveTokenCall__Inputs {
    return new RemoveTokenCall__Inputs(this);
  }

  get outputs(): RemoveTokenCall__Outputs {
    return new RemoveTokenCall__Outputs(this);
  }
}

export class RemoveTokenCall__Inputs {
  _call: RemoveTokenCall;

  constructor(call: RemoveTokenCall) {
    this._call = call;
  }

  get tokenToRemove(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get burnAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get sender(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RemoveTokenCall__Outputs {
  _call: RemoveTokenCall;

  constructor(call: RemoveTokenCall) {
    this._call = call;
  }
}

export class SetCircuitBreakersCall extends ethereum.Call {
  get inputs(): SetCircuitBreakersCall__Inputs {
    return new SetCircuitBreakersCall__Inputs(this);
  }

  get outputs(): SetCircuitBreakersCall__Outputs {
    return new SetCircuitBreakersCall__Outputs(this);
  }
}

export class SetCircuitBreakersCall__Inputs {
  _call: SetCircuitBreakersCall;

  constructor(call: SetCircuitBreakersCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get bptPrices(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get lowerBoundPercentages(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get upperBoundPercentages(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class SetCircuitBreakersCall__Outputs {
  _call: SetCircuitBreakersCall;

  constructor(call: SetCircuitBreakersCall) {
    this._call = call;
  }
}

export class SetJoinExitEnabledCall extends ethereum.Call {
  get inputs(): SetJoinExitEnabledCall__Inputs {
    return new SetJoinExitEnabledCall__Inputs(this);
  }

  get outputs(): SetJoinExitEnabledCall__Outputs {
    return new SetJoinExitEnabledCall__Outputs(this);
  }
}

export class SetJoinExitEnabledCall__Inputs {
  _call: SetJoinExitEnabledCall;

  constructor(call: SetJoinExitEnabledCall) {
    this._call = call;
  }

  get joinExitEnabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetJoinExitEnabledCall__Outputs {
  _call: SetJoinExitEnabledCall;

  constructor(call: SetJoinExitEnabledCall) {
    this._call = call;
  }
}

export class SetManagementAumFeePercentageCall extends ethereum.Call {
  get inputs(): SetManagementAumFeePercentageCall__Inputs {
    return new SetManagementAumFeePercentageCall__Inputs(this);
  }

  get outputs(): SetManagementAumFeePercentageCall__Outputs {
    return new SetManagementAumFeePercentageCall__Outputs(this);
  }
}

export class SetManagementAumFeePercentageCall__Inputs {
  _call: SetManagementAumFeePercentageCall;

  constructor(call: SetManagementAumFeePercentageCall) {
    this._call = call;
  }

  get managementAumFeePercentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetManagementAumFeePercentageCall__Outputs {
  _call: SetManagementAumFeePercentageCall;

  constructor(call: SetManagementAumFeePercentageCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetMustAllowlistLPsCall extends ethereum.Call {
  get inputs(): SetMustAllowlistLPsCall__Inputs {
    return new SetMustAllowlistLPsCall__Inputs(this);
  }

  get outputs(): SetMustAllowlistLPsCall__Outputs {
    return new SetMustAllowlistLPsCall__Outputs(this);
  }
}

export class SetMustAllowlistLPsCall__Inputs {
  _call: SetMustAllowlistLPsCall;

  constructor(call: SetMustAllowlistLPsCall) {
    this._call = call;
  }

  get mustAllowlistLPs(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetMustAllowlistLPsCall__Outputs {
  _call: SetMustAllowlistLPsCall;

  constructor(call: SetMustAllowlistLPsCall) {
    this._call = call;
  }
}

export class SetSwapEnabledCall extends ethereum.Call {
  get inputs(): SetSwapEnabledCall__Inputs {
    return new SetSwapEnabledCall__Inputs(this);
  }

  get outputs(): SetSwapEnabledCall__Outputs {
    return new SetSwapEnabledCall__Outputs(this);
  }
}

export class SetSwapEnabledCall__Inputs {
  _call: SetSwapEnabledCall;

  constructor(call: SetSwapEnabledCall) {
    this._call = call;
  }

  get swapEnabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetSwapEnabledCall__Outputs {
  _call: SetSwapEnabledCall;

  constructor(call: SetSwapEnabledCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateProtocolFeePercentageCacheCall extends ethereum.Call {
  get inputs(): UpdateProtocolFeePercentageCacheCall__Inputs {
    return new UpdateProtocolFeePercentageCacheCall__Inputs(this);
  }

  get outputs(): UpdateProtocolFeePercentageCacheCall__Outputs {
    return new UpdateProtocolFeePercentageCacheCall__Outputs(this);
  }
}

export class UpdateProtocolFeePercentageCacheCall__Inputs {
  _call: UpdateProtocolFeePercentageCacheCall;

  constructor(call: UpdateProtocolFeePercentageCacheCall) {
    this._call = call;
  }
}

export class UpdateProtocolFeePercentageCacheCall__Outputs {
  _call: UpdateProtocolFeePercentageCacheCall;

  constructor(call: UpdateProtocolFeePercentageCacheCall) {
    this._call = call;
  }
}

export class UpdateSwapFeeGraduallyCall extends ethereum.Call {
  get inputs(): UpdateSwapFeeGraduallyCall__Inputs {
    return new UpdateSwapFeeGraduallyCall__Inputs(this);
  }

  get outputs(): UpdateSwapFeeGraduallyCall__Outputs {
    return new UpdateSwapFeeGraduallyCall__Outputs(this);
  }
}

export class UpdateSwapFeeGraduallyCall__Inputs {
  _call: UpdateSwapFeeGraduallyCall;

  constructor(call: UpdateSwapFeeGraduallyCall) {
    this._call = call;
  }

  get startTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get startSwapFeePercentage(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get endSwapFeePercentage(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UpdateSwapFeeGraduallyCall__Outputs {
  _call: UpdateSwapFeeGraduallyCall;

  constructor(call: UpdateSwapFeeGraduallyCall) {
    this._call = call;
  }
}

export class UpdateWeightsGraduallyCall extends ethereum.Call {
  get inputs(): UpdateWeightsGraduallyCall__Inputs {
    return new UpdateWeightsGraduallyCall__Inputs(this);
  }

  get outputs(): UpdateWeightsGraduallyCall__Outputs {
    return new UpdateWeightsGraduallyCall__Outputs(this);
  }
}

export class UpdateWeightsGraduallyCall__Inputs {
  _call: UpdateWeightsGraduallyCall;

  constructor(call: UpdateWeightsGraduallyCall) {
    this._call = call;
  }

  get startTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get endWeights(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class UpdateWeightsGraduallyCall__Outputs {
  _call: UpdateWeightsGraduallyCall;

  constructor(call: UpdateWeightsGraduallyCall) {
    this._call = call;
  }
}
