// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApproveBaseOracle extends ethereum.Event {
  get params(): ApproveBaseOracle__Params {
    return new ApproveBaseOracle__Params(this);
  }
}

export class ApproveBaseOracle__Params {
  _event: ApproveBaseOracle;

  constructor(event: ApproveBaseOracle) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oracleAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BaseAssimilatorTemplateSet extends ethereum.Event {
  get params(): BaseAssimilatorTemplateSet__Params {
    return new BaseAssimilatorTemplateSet__Params(this);
  }
}

export class BaseAssimilatorTemplateSet__Params {
  _event: BaseAssimilatorTemplateSet;

  constructor(event: BaseAssimilatorTemplateSet) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get assimilatorAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DisapproveBaseOracle extends ethereum.Event {
  get params(): DisapproveBaseOracle__Params {
    return new DisapproveBaseOracle__Params(this);
  }
}

export class DisapproveBaseOracle__Params {
  _event: DisapproveBaseOracle;

  constructor(event: DisapproveBaseOracle) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oracleAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FXPoolCollectorSet extends ethereum.Event {
  get params(): FXPoolCollectorSet__Params {
    return new FXPoolCollectorSet__Params(this);
  }
}

export class FXPoolCollectorSet__Params {
  _event: FXPoolCollectorSet;

  constructor(event: FXPoolCollectorSet) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collectorAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FXPoolOwnerSet extends ethereum.Event {
  get params(): FXPoolOwnerSet__Params {
    return new FXPoolOwnerSet__Params(this);
  }
}

export class FXPoolOwnerSet__Params {
  _event: FXPoolOwnerSet;

  constructor(event: FXPoolOwnerSet) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ownerAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewBaseAssimilator extends ethereum.Event {
  get params(): NewBaseAssimilator__Params {
    return new NewBaseAssimilator__Params(this);
  }
}

export class NewBaseAssimilator__Params {
  _event: NewBaseAssimilator;

  constructor(event: NewBaseAssimilator) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get assimilatorAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewFXPool extends ethereum.Event {
  get params(): NewFXPool__Params {
    return new NewFXPool__Params(this);
  }
}

export class NewFXPool__Params {
  _event: NewFXPool;

  constructor(event: NewFXPool) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get fxpool(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class QuoteAssimilatorSet extends ethereum.Event {
  get params(): QuoteAssimilatorSet__Params {
    return new QuoteAssimilatorSet__Params(this);
  }
}

export class QuoteAssimilatorSet__Params {
  _event: QuoteAssimilatorSet;

  constructor(event: QuoteAssimilatorSet) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get assimilatorAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetMinProtocolPercentFee extends ethereum.Event {
  get params(): SetMinProtocolPercentFee__Params {
    return new SetMinProtocolPercentFee__Params(this);
  }
}

export class SetMinProtocolPercentFee__Params {
  _event: SetMinProtocolPercentFee;

  constructor(event: SetMinProtocolPercentFee) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get minProtocolPercentFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FXPoolDeployer__getFXPoolDetailsResult {
  value0: string;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;

  constructor(
    value0: string,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    return map;
  }
}

export class FXPoolDeployer__newFXPoolResult {
  value0: Bytes;
  value1: Address;

  constructor(value0: Bytes, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class FXPoolDeployer__poolsDataResult {
  value0: Bytes;
  value1: Address;
  value2: Address;
  value3: boolean;

  constructor(
    value0: Bytes,
    value1: Address,
    value2: Address,
    value3: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }
}

export class FXPoolDeployer__viewDepositNoLiquidityResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class FXPoolDeployer extends ethereum.SmartContract {
  static bind(address: Address): FXPoolDeployer {
    return new FXPoolDeployer("FXPoolDeployer", address);
  }

  BASE_WEIGHT(): BigInt {
    let result = super.call("BASE_WEIGHT", "BASE_WEIGHT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BASE_WEIGHT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BASE_WEIGHT", "BASE_WEIGHT():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  LP_MINTED_ROUNDING_ERR_THRESHOLD(): BigInt {
    let result = super.call(
      "LP_MINTED_ROUNDING_ERR_THRESHOLD",
      "LP_MINTED_ROUNDING_ERR_THRESHOLD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_LP_MINTED_ROUNDING_ERR_THRESHOLD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "LP_MINTED_ROUNDING_ERR_THRESHOLD",
      "LP_MINTED_ROUNDING_ERR_THRESHOLD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_PERCENT_FEE(): BigInt {
    let result = super.call(
      "MIN_PERCENT_FEE",
      "MIN_PERCENT_FEE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MIN_PERCENT_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_PERCENT_FEE",
      "MIN_PERCENT_FEE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  QUOTE_WEIGHT(): BigInt {
    let result = super.call("QUOTE_WEIGHT", "QUOTE_WEIGHT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_QUOTE_WEIGHT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("QUOTE_WEIGHT", "QUOTE_WEIGHT():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseAssimilatorTemplate(): Address {
    let result = super.call(
      "baseAssimilatorTemplate",
      "baseAssimilatorTemplate():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_baseAssimilatorTemplate(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "baseAssimilatorTemplate",
      "baseAssimilatorTemplate():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  baseAssimilators(param0: Bytes): Address {
    let result = super.call(
      "baseAssimilators",
      "baseAssimilators(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toAddress();
  }

  try_baseAssimilators(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "baseAssimilators",
      "baseAssimilators(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  baseOraclesWhitelist(param0: Address): boolean {
    let result = super.call(
      "baseOraclesWhitelist",
      "baseOraclesWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_baseOraclesWhitelist(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "baseOraclesWhitelist",
      "baseOraclesWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  fxpoolCollector(): Address {
    let result = super.call(
      "fxpoolCollector",
      "fxpoolCollector():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_fxpoolCollector(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "fxpoolCollector",
      "fxpoolCollector():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fxpoolOwner(): Address {
    let result = super.call("fxpoolOwner", "fxpoolOwner():(address)", []);

    return result[0].toAddress();
  }

  try_fxpoolOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("fxpoolOwner", "fxpoolOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFXPoolDetails(
    _fxpoolAddr: Address
  ): FXPoolDeployer__getFXPoolDetailsResult {
    let result = super.call(
      "getFXPoolDetails",
      "getFXPoolDetails(address):(string,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_fxpoolAddr)]
    );

    return new FXPoolDeployer__getFXPoolDetailsResult(
      result[0].toString(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt()
    );
  }

  try_getFXPoolDetails(
    _fxpoolAddr: Address
  ): ethereum.CallResult<FXPoolDeployer__getFXPoolDetailsResult> {
    let result = super.tryCall(
      "getFXPoolDetails",
      "getFXPoolDetails(address):(string,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_fxpoolAddr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FXPoolDeployer__getFXPoolDetailsResult(
        value[0].toString(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt()
      )
    );
  }

  newFXPool(
    _baseToken: Address,
    _baseOracle: Address,
    _initialDepositInNumeraire: BigInt,
    _params: Bytes
  ): FXPoolDeployer__newFXPoolResult {
    let result = super.call(
      "newFXPool",
      "newFXPool(address,address,uint256,bytes):(bytes32,address)",
      [
        ethereum.Value.fromAddress(_baseToken),
        ethereum.Value.fromAddress(_baseOracle),
        ethereum.Value.fromUnsignedBigInt(_initialDepositInNumeraire),
        ethereum.Value.fromBytes(_params)
      ]
    );

    return new FXPoolDeployer__newFXPoolResult(
      result[0].toBytes(),
      result[1].toAddress()
    );
  }

  try_newFXPool(
    _baseToken: Address,
    _baseOracle: Address,
    _initialDepositInNumeraire: BigInt,
    _params: Bytes
  ): ethereum.CallResult<FXPoolDeployer__newFXPoolResult> {
    let result = super.tryCall(
      "newFXPool",
      "newFXPool(address,address,uint256,bytes):(bytes32,address)",
      [
        ethereum.Value.fromAddress(_baseToken),
        ethereum.Value.fromAddress(_baseOracle),
        ethereum.Value.fromUnsignedBigInt(_initialDepositInNumeraire),
        ethereum.Value.fromBytes(_params)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FXPoolDeployer__newFXPoolResult(
        value[0].toBytes(),
        value[1].toAddress()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolsData(param0: Address): FXPoolDeployer__poolsDataResult {
    let result = super.call(
      "poolsData",
      "poolsData(address):(bytes32,address,address,bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new FXPoolDeployer__poolsDataResult(
      result[0].toBytes(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBoolean()
    );
  }

  try_poolsData(
    param0: Address
  ): ethereum.CallResult<FXPoolDeployer__poolsDataResult> {
    let result = super.tryCall(
      "poolsData",
      "poolsData(address):(bytes32,address,address,bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FXPoolDeployer__poolsDataResult(
        value[0].toBytes(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBoolean()
      )
    );
  }

  quoteAssimilator(): Address {
    let result = super.call(
      "quoteAssimilator",
      "quoteAssimilator():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_quoteAssimilator(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "quoteAssimilator",
      "quoteAssimilator():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  quoteToken(): Address {
    let result = super.call("quoteToken", "quoteToken():(address)", []);

    return result[0].toAddress();
  }

  try_quoteToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("quoteToken", "quoteToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vault(): Address {
    let result = super.call("vault", "vault():(address)", []);

    return result[0].toAddress();
  }

  try_vault(): ethereum.CallResult<Address> {
    let result = super.tryCall("vault", "vault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  viewDepositNoLiquidity(
    _initialDepositInNumeraire: BigInt,
    _baseToken: Address,
    _baseOracle: Address
  ): FXPoolDeployer__viewDepositNoLiquidityResult {
    let result = super.call(
      "viewDepositNoLiquidity",
      "viewDepositNoLiquidity(uint256,address,address):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_initialDepositInNumeraire),
        ethereum.Value.fromAddress(_baseToken),
        ethereum.Value.fromAddress(_baseOracle)
      ]
    );

    return new FXPoolDeployer__viewDepositNoLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_viewDepositNoLiquidity(
    _initialDepositInNumeraire: BigInt,
    _baseToken: Address,
    _baseOracle: Address
  ): ethereum.CallResult<FXPoolDeployer__viewDepositNoLiquidityResult> {
    let result = super.tryCall(
      "viewDepositNoLiquidity",
      "viewDepositNoLiquidity(uint256,address,address):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_initialDepositInNumeraire),
        ethereum.Value.fromAddress(_baseToken),
        ethereum.Value.fromAddress(_baseOracle)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FXPoolDeployer__viewDepositNoLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }
}

export class AdminApproveBaseOracleCall extends ethereum.Call {
  get inputs(): AdminApproveBaseOracleCall__Inputs {
    return new AdminApproveBaseOracleCall__Inputs(this);
  }

  get outputs(): AdminApproveBaseOracleCall__Outputs {
    return new AdminApproveBaseOracleCall__Outputs(this);
  }
}

export class AdminApproveBaseOracleCall__Inputs {
  _call: AdminApproveBaseOracleCall;

  constructor(call: AdminApproveBaseOracleCall) {
    this._call = call;
  }

  get _baseOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AdminApproveBaseOracleCall__Outputs {
  _call: AdminApproveBaseOracleCall;

  constructor(call: AdminApproveBaseOracleCall) {
    this._call = call;
  }
}

export class AdminDisapproveBaseOracleCall extends ethereum.Call {
  get inputs(): AdminDisapproveBaseOracleCall__Inputs {
    return new AdminDisapproveBaseOracleCall__Inputs(this);
  }

  get outputs(): AdminDisapproveBaseOracleCall__Outputs {
    return new AdminDisapproveBaseOracleCall__Outputs(this);
  }
}

export class AdminDisapproveBaseOracleCall__Inputs {
  _call: AdminDisapproveBaseOracleCall;

  constructor(call: AdminDisapproveBaseOracleCall) {
    this._call = call;
  }

  get _baseOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AdminDisapproveBaseOracleCall__Outputs {
  _call: AdminDisapproveBaseOracleCall;

  constructor(call: AdminDisapproveBaseOracleCall) {
    this._call = call;
  }
}

export class AdminSetFxpoolCollectorCall extends ethereum.Call {
  get inputs(): AdminSetFxpoolCollectorCall__Inputs {
    return new AdminSetFxpoolCollectorCall__Inputs(this);
  }

  get outputs(): AdminSetFxpoolCollectorCall__Outputs {
    return new AdminSetFxpoolCollectorCall__Outputs(this);
  }
}

export class AdminSetFxpoolCollectorCall__Inputs {
  _call: AdminSetFxpoolCollectorCall;

  constructor(call: AdminSetFxpoolCollectorCall) {
    this._call = call;
  }

  get _a(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AdminSetFxpoolCollectorCall__Outputs {
  _call: AdminSetFxpoolCollectorCall;

  constructor(call: AdminSetFxpoolCollectorCall) {
    this._call = call;
  }
}

export class AdminSetFxpoolOwnerCall extends ethereum.Call {
  get inputs(): AdminSetFxpoolOwnerCall__Inputs {
    return new AdminSetFxpoolOwnerCall__Inputs(this);
  }

  get outputs(): AdminSetFxpoolOwnerCall__Outputs {
    return new AdminSetFxpoolOwnerCall__Outputs(this);
  }
}

export class AdminSetFxpoolOwnerCall__Inputs {
  _call: AdminSetFxpoolOwnerCall;

  constructor(call: AdminSetFxpoolOwnerCall) {
    this._call = call;
  }

  get _a(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AdminSetFxpoolOwnerCall__Outputs {
  _call: AdminSetFxpoolOwnerCall;

  constructor(call: AdminSetFxpoolOwnerCall) {
    this._call = call;
  }
}

export class AdminSetMinProtocolPercentFeeCall extends ethereum.Call {
  get inputs(): AdminSetMinProtocolPercentFeeCall__Inputs {
    return new AdminSetMinProtocolPercentFeeCall__Inputs(this);
  }

  get outputs(): AdminSetMinProtocolPercentFeeCall__Outputs {
    return new AdminSetMinProtocolPercentFeeCall__Outputs(this);
  }
}

export class AdminSetMinProtocolPercentFeeCall__Inputs {
  _call: AdminSetMinProtocolPercentFeeCall;

  constructor(call: AdminSetMinProtocolPercentFeeCall) {
    this._call = call;
  }

  get _minPercentProtocolFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AdminSetMinProtocolPercentFeeCall__Outputs {
  _call: AdminSetMinProtocolPercentFeeCall;

  constructor(call: AdminSetMinProtocolPercentFeeCall) {
    this._call = call;
  }
}

export class AdminSetQuoteAssimilatorCall extends ethereum.Call {
  get inputs(): AdminSetQuoteAssimilatorCall__Inputs {
    return new AdminSetQuoteAssimilatorCall__Inputs(this);
  }

  get outputs(): AdminSetQuoteAssimilatorCall__Outputs {
    return new AdminSetQuoteAssimilatorCall__Outputs(this);
  }
}

export class AdminSetQuoteAssimilatorCall__Inputs {
  _call: AdminSetQuoteAssimilatorCall;

  constructor(call: AdminSetQuoteAssimilatorCall) {
    this._call = call;
  }

  get _quoteAssim(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AdminSetQuoteAssimilatorCall__Outputs {
  _call: AdminSetQuoteAssimilatorCall;

  constructor(call: AdminSetQuoteAssimilatorCall) {
    this._call = call;
  }
}

export class AdminSetbaseAssimilatorTemplateCall extends ethereum.Call {
  get inputs(): AdminSetbaseAssimilatorTemplateCall__Inputs {
    return new AdminSetbaseAssimilatorTemplateCall__Inputs(this);
  }

  get outputs(): AdminSetbaseAssimilatorTemplateCall__Outputs {
    return new AdminSetbaseAssimilatorTemplateCall__Outputs(this);
  }
}

export class AdminSetbaseAssimilatorTemplateCall__Inputs {
  _call: AdminSetbaseAssimilatorTemplateCall;

  constructor(call: AdminSetbaseAssimilatorTemplateCall) {
    this._call = call;
  }

  get _baseAssim(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AdminSetbaseAssimilatorTemplateCall__Outputs {
  _call: AdminSetbaseAssimilatorTemplateCall;

  constructor(call: AdminSetbaseAssimilatorTemplateCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _quoteToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _quoteAssimilator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _baseAssimilatorTemplate(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class NewFXPoolCall extends ethereum.Call {
  get inputs(): NewFXPoolCall__Inputs {
    return new NewFXPoolCall__Inputs(this);
  }

  get outputs(): NewFXPoolCall__Outputs {
    return new NewFXPoolCall__Outputs(this);
  }
}

export class NewFXPoolCall__Inputs {
  _call: NewFXPoolCall;

  constructor(call: NewFXPoolCall) {
    this._call = call;
  }

  get _baseToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _baseOracle(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _initialDepositInNumeraire(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _params(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class NewFXPoolCall__Outputs {
  _call: NewFXPoolCall;

  constructor(call: NewFXPoolCall) {
    this._call = call;
  }

  get balancerPoolId(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }

  get fxpoolAddr(): Address {
    return this._call.outputValues[1].value.toAddress();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
