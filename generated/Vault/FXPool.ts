// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AssetIncluded extends ethereum.Event {
  get params(): AssetIncluded__Params {
    return new AssetIncluded__Params(this);
  }
}

export class AssetIncluded__Params {
  _event: AssetIncluded;

  constructor(event: AssetIncluded) {
    this._event = event;
  }

  get numeraire(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reserve(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get weight(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AssimilatorIncluded extends ethereum.Event {
  get params(): AssimilatorIncluded__Params {
    return new AssimilatorIncluded__Params(this);
  }
}

export class AssimilatorIncluded__Params {
  _event: AssimilatorIncluded;

  constructor(event: AssimilatorIncluded) {
    this._event = event;
  }

  get derivative(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get numeraire(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get reserve(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get assimilator(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class ChangeCollectorAddress extends ethereum.Event {
  get params(): ChangeCollectorAddress__Params {
    return new ChangeCollectorAddress__Params(this);
  }
}

export class ChangeCollectorAddress__Params {
  _event: ChangeCollectorAddress;

  constructor(event: ChangeCollectorAddress) {
    this._event = event;
  }

  get newCollector(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class EmergencyAlarm extends ethereum.Event {
  get params(): EmergencyAlarm__Params {
    return new EmergencyAlarm__Params(this);
  }
}

export class EmergencyAlarm__Params {
  _event: EmergencyAlarm;

  constructor(event: EmergencyAlarm) {
    this._event = event;
  }

  get isEmergency(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class EmergencyWithdraw extends ethereum.Event {
  get params(): EmergencyWithdraw__Params {
    return new EmergencyWithdraw__Params(this);
  }
}

export class EmergencyWithdraw__Params {
  _event: EmergencyWithdraw;

  constructor(event: EmergencyWithdraw) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get lptAmountBurned(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountsWithdrawn(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }
}

export class FeesAccrued extends ethereum.Event {
  get params(): FeesAccrued__Params {
    return new FeesAccrued__Params(this);
  }
}

export class FeesAccrued__Params {
  _event: FeesAccrued;

  constructor(event: FeesAccrued) {
    this._event = event;
  }

  get feesCollected(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class FeesCollected extends ethereum.Event {
  get params(): FeesCollected__Params {
    return new FeesCollected__Params(this);
  }
}

export class FeesCollected__Params {
  _event: FeesCollected;

  constructor(event: FeesCollected) {
    this._event = event;
  }

  get recipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get feesCollected(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OnExitPool extends ethereum.Event {
  get params(): OnExitPool__Params {
    return new OnExitPool__Params(this);
  }
}

export class OnExitPool__Params {
  _event: OnExitPool;

  constructor(event: OnExitPool) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get lptAmountBurned(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountsWithdrawn(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }
}

export class OnJoinPool extends ethereum.Event {
  get params(): OnJoinPool__Params {
    return new OnJoinPool__Params(this);
  }
}

export class OnJoinPool__Params {
  _event: OnJoinPool;

  constructor(event: OnJoinPool) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get lptAmountMinted(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountsDeposited(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ParametersSet extends ethereum.Event {
  get params(): ParametersSet__Params {
    return new ParametersSet__Params(this);
  }
}

export class ParametersSet__Params {
  _event: ParametersSet;

  constructor(event: ParametersSet) {
    this._event = event;
  }

  get alpha(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get beta(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get delta(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get epsilon(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get lambda(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ProtocolFeeShareUpdated extends ethereum.Event {
  get params(): ProtocolFeeShareUpdated__Params {
    return new ProtocolFeeShareUpdated__Params(this);
  }
}

export class ProtocolFeeShareUpdated__Params {
  _event: ProtocolFeeShareUpdated;

  constructor(event: ProtocolFeeShareUpdated) {
    this._event = event;
  }

  get updater(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newProtocolPercentage(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Trade extends ethereum.Event {
  get params(): Trade__Params {
    return new Trade__Params(this);
  }
}

export class Trade__Params {
  _event: Trade;

  constructor(event: Trade) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get origin(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get target(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get originAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get targetAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class FXPool__curveResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: Address;
  value7: Address;
  value8: Bytes;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: Address,
    value7: Address,
    value8: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromSignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromSignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromSignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    map.set("value7", ethereum.Value.fromAddress(this.value7));
    map.set("value8", ethereum.Value.fromFixedBytes(this.value8));
    return map;
  }
}

export class FXPool__liquidityResult {
  value0: BigInt;
  value1: Array<BigInt>;

  constructor(value0: BigInt, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class FXPool__onExitPoolResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class FXPool__onJoinPoolResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class FXPool__onSwapInputSwapRequestStruct extends ethereum.Tuple {
  get kind(): i32 {
    return this[0].toI32();
  }

  get tokenIn(): Address {
    return this[1].toAddress();
  }

  get tokenOut(): Address {
    return this[2].toAddress();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get poolId(): Bytes {
    return this[4].toBytes();
  }

  get lastChangeBlock(): BigInt {
    return this[5].toBigInt();
  }

  get from(): Address {
    return this[6].toAddress();
  }

  get to(): Address {
    return this[7].toAddress();
  }

  get userData(): Bytes {
    return this[8].toBytes();
  }
}

export class FXPool__viewDepositResult {
  value0: BigInt;
  value1: Array<BigInt>;

  constructor(value0: BigInt, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class FXPool__viewParametersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class FXPool extends ethereum.SmartContract {
  static bind(address: Address): FXPool {
    return new FXPool("FXPool", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  assimilator(_derivative: Address): Address {
    let result = super.call("assimilator", "assimilator(address):(address)", [
      ethereum.Value.fromAddress(_derivative)
    ]);

    return result[0].toAddress();
  }

  try_assimilator(_derivative: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "assimilator",
      "assimilator(address):(address)",
      [ethereum.Value.fromAddress(_derivative)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collectorAddress(): Address {
    let result = super.call(
      "collectorAddress",
      "collectorAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_collectorAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "collectorAddress",
      "collectorAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  curve(): FXPool__curveResult {
    let result = super.call(
      "curve",
      "curve():(int128,int128,int128,int128,int128,uint256,address,address,bytes32)",
      []
    );

    return new FXPool__curveResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toAddress(),
      result[7].toAddress(),
      result[8].toBytes()
    );
  }

  try_curve(): ethereum.CallResult<FXPool__curveResult> {
    let result = super.tryCall(
      "curve",
      "curve():(int128,int128,int128,int128,int128,uint256,address,address,bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FXPool__curveResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toAddress(),
        value[7].toAddress(),
        value[8].toBytes()
      )
    );
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, amount: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  derivatives(param0: BigInt): Address {
    let result = super.call("derivatives", "derivatives(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_derivatives(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "derivatives",
      "derivatives(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  emergency(): boolean {
    let result = super.call("emergency", "emergency():(bool)", []);

    return result[0].toBoolean();
  }

  try_emergency(): ethereum.CallResult<boolean> {
    let result = super.tryCall("emergency", "emergency():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getPoolId(): Bytes {
    let result = super.call("getPoolId", "getPoolId():(bytes32)", []);

    return result[0].toBytes();
  }

  try_getPoolId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getPoolId", "getPoolId():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getVault(): Address {
    let result = super.call("getVault", "getVault():(address)", []);

    return result[0].toAddress();
  }

  try_getVault(): ethereum.CallResult<Address> {
    let result = super.tryCall("getVault", "getVault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liquidity(): FXPool__liquidityResult {
    let result = super.call("liquidity", "liquidity():(uint256,uint256[])", []);

    return new FXPool__liquidityResult(
      result[0].toBigInt(),
      result[1].toBigIntArray()
    );
  }

  try_liquidity(): ethereum.CallResult<FXPool__liquidityResult> {
    let result = super.tryCall(
      "liquidity",
      "liquidity():(uint256,uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FXPool__liquidityResult(value[0].toBigInt(), value[1].toBigIntArray())
    );
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(owner: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numeraires(param0: BigInt): Address {
    let result = super.call("numeraires", "numeraires(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_numeraires(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("numeraires", "numeraires(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onExitPool(
    poolId: Bytes,
    sender: Address,
    param2: Address,
    param3: Array<BigInt>,
    param4: BigInt,
    param5: BigInt,
    userData: Bytes
  ): FXPool__onExitPoolResult {
    let result = super.call(
      "onExitPool",
      "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256[],uint256[])",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromUnsignedBigInt(param4),
        ethereum.Value.fromUnsignedBigInt(param5),
        ethereum.Value.fromBytes(userData)
      ]
    );

    return new FXPool__onExitPoolResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray()
    );
  }

  try_onExitPool(
    poolId: Bytes,
    sender: Address,
    param2: Address,
    param3: Array<BigInt>,
    param4: BigInt,
    param5: BigInt,
    userData: Bytes
  ): ethereum.CallResult<FXPool__onExitPoolResult> {
    let result = super.tryCall(
      "onExitPool",
      "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256[],uint256[])",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromUnsignedBigInt(param4),
        ethereum.Value.fromUnsignedBigInt(param5),
        ethereum.Value.fromBytes(userData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FXPool__onExitPoolResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray()
      )
    );
  }

  onJoinPool(
    poolId: Bytes,
    param1: Address,
    recipient: Address,
    param3: Array<BigInt>,
    param4: BigInt,
    param5: BigInt,
    userData: Bytes
  ): FXPool__onJoinPoolResult {
    let result = super.call(
      "onJoinPool",
      "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256[],uint256[])",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromUnsignedBigInt(param4),
        ethereum.Value.fromUnsignedBigInt(param5),
        ethereum.Value.fromBytes(userData)
      ]
    );

    return new FXPool__onJoinPoolResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray()
    );
  }

  try_onJoinPool(
    poolId: Bytes,
    param1: Address,
    recipient: Address,
    param3: Array<BigInt>,
    param4: BigInt,
    param5: BigInt,
    userData: Bytes
  ): ethereum.CallResult<FXPool__onJoinPoolResult> {
    let result = super.tryCall(
      "onJoinPool",
      "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes):(uint256[],uint256[])",
      [
        ethereum.Value.fromFixedBytes(poolId),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromUnsignedBigInt(param4),
        ethereum.Value.fromUnsignedBigInt(param5),
        ethereum.Value.fromBytes(userData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FXPool__onJoinPoolResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray()
      )
    );
  }

  onSwap(
    swapRequest: FXPool__onSwapInputSwapRequestStruct,
    param1: BigInt,
    param2: BigInt
  ): BigInt {
    let result = super.call(
      "onSwap",
      "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256,uint256):(uint256)",
      [
        ethereum.Value.fromTuple(swapRequest),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toBigInt();
  }

  try_onSwap(
    swapRequest: FXPool__onSwapInputSwapRequestStruct,
    param1: BigInt,
    param2: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "onSwap",
      "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256,uint256):(uint256)",
      [
        ethereum.Value.fromTuple(swapRequest),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  protocolPercentFee(): BigInt {
    let result = super.call(
      "protocolPercentFee",
      "protocolPercentFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_protocolPercentFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "protocolPercentFee",
      "protocolPercentFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reserves(param0: BigInt): Address {
    let result = super.call("reserves", "reserves(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_reserves(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("reserves", "reserves(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalUnclaimedFeesInNumeraire(): BigInt {
    let result = super.call(
      "totalUnclaimedFeesInNumeraire",
      "totalUnclaimedFeesInNumeraire():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalUnclaimedFeesInNumeraire(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalUnclaimedFeesInNumeraire",
      "totalUnclaimedFeesInNumeraire():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  viewDeposit(totalDepositNumeraire: BigInt): FXPool__viewDepositResult {
    let result = super.call(
      "viewDeposit",
      "viewDeposit(uint256):(uint256,uint256[])",
      [ethereum.Value.fromUnsignedBigInt(totalDepositNumeraire)]
    );

    return new FXPool__viewDepositResult(
      result[0].toBigInt(),
      result[1].toBigIntArray()
    );
  }

  try_viewDeposit(
    totalDepositNumeraire: BigInt
  ): ethereum.CallResult<FXPool__viewDepositResult> {
    let result = super.tryCall(
      "viewDeposit",
      "viewDeposit(uint256):(uint256,uint256[])",
      [ethereum.Value.fromUnsignedBigInt(totalDepositNumeraire)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FXPool__viewDepositResult(
        value[0].toBigInt(),
        value[1].toBigIntArray()
      )
    );
  }

  viewParameters(): FXPool__viewParametersResult {
    let result = super.call(
      "viewParameters",
      "viewParameters():(uint256,uint256,uint256,uint256,uint256)",
      []
    );

    return new FXPool__viewParametersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_viewParameters(): ethereum.CallResult<FXPool__viewParametersResult> {
    let result = super.tryCall(
      "viewParameters",
      "viewParameters():(uint256,uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FXPool__viewParametersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  viewWithdraw(_curvesToBurn: BigInt): Array<BigInt> {
    let result = super.call(
      "viewWithdraw",
      "viewWithdraw(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_curvesToBurn)]
    );

    return result[0].toBigIntArray();
  }

  try_viewWithdraw(_curvesToBurn: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "viewWithdraw",
      "viewWithdraw(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_curvesToBurn)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _assetsToRegister(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get vault(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _protocolPercentFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _name(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _assets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _assetWeights(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class OnExitPoolCall extends ethereum.Call {
  get inputs(): OnExitPoolCall__Inputs {
    return new OnExitPoolCall__Inputs(this);
  }

  get outputs(): OnExitPoolCall__Outputs {
    return new OnExitPoolCall__Outputs(this);
  }
}

export class OnExitPoolCall__Inputs {
  _call: OnExitPoolCall;

  constructor(call: OnExitPoolCall) {
    this._call = call;
  }

  get poolId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get sender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get value5(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get userData(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class OnExitPoolCall__Outputs {
  _call: OnExitPoolCall;

  constructor(call: OnExitPoolCall) {
    this._call = call;
  }

  get amountsOut(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }

  get dueProtocolFeeAmounts(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class OnJoinPoolCall extends ethereum.Call {
  get inputs(): OnJoinPoolCall__Inputs {
    return new OnJoinPoolCall__Inputs(this);
  }

  get outputs(): OnJoinPoolCall__Outputs {
    return new OnJoinPoolCall__Outputs(this);
  }
}

export class OnJoinPoolCall__Inputs {
  _call: OnJoinPoolCall;

  constructor(call: OnJoinPoolCall) {
    this._call = call;
  }

  get poolId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get value5(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get userData(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class OnJoinPoolCall__Outputs {
  _call: OnJoinPoolCall;

  constructor(call: OnJoinPoolCall) {
    this._call = call;
  }

  get amountsIn(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }

  get dueProtocolFeeAmounts(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class OnSwapCall extends ethereum.Call {
  get inputs(): OnSwapCall__Inputs {
    return new OnSwapCall__Inputs(this);
  }

  get outputs(): OnSwapCall__Outputs {
    return new OnSwapCall__Outputs(this);
  }
}

export class OnSwapCall__Inputs {
  _call: OnSwapCall;

  constructor(call: OnSwapCall) {
    this._call = call;
  }

  get swapRequest(): OnSwapCallSwapRequestStruct {
    return changetype<OnSwapCallSwapRequestStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get value1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class OnSwapCall__Outputs {
  _call: OnSwapCall;

  constructor(call: OnSwapCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class OnSwapCallSwapRequestStruct extends ethereum.Tuple {
  get kind(): i32 {
    return this[0].toI32();
  }

  get tokenIn(): Address {
    return this[1].toAddress();
  }

  get tokenOut(): Address {
    return this[2].toAddress();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get poolId(): Bytes {
    return this[4].toBytes();
  }

  get lastChangeBlock(): BigInt {
    return this[5].toBigInt();
  }

  get from(): Address {
    return this[6].toAddress();
  }

  get to(): Address {
    return this[7].toAddress();
  }

  get userData(): Bytes {
    return this[8].toBytes();
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetCapCall extends ethereum.Call {
  get inputs(): SetCapCall__Inputs {
    return new SetCapCall__Inputs(this);
  }

  get outputs(): SetCapCall__Outputs {
    return new SetCapCall__Outputs(this);
  }
}

export class SetCapCall__Inputs {
  _call: SetCapCall;

  constructor(call: SetCapCall) {
    this._call = call;
  }

  get _cap(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCapCall__Outputs {
  _call: SetCapCall;

  constructor(call: SetCapCall) {
    this._call = call;
  }
}

export class SetCollectorAddressCall extends ethereum.Call {
  get inputs(): SetCollectorAddressCall__Inputs {
    return new SetCollectorAddressCall__Inputs(this);
  }

  get outputs(): SetCollectorAddressCall__Outputs {
    return new SetCollectorAddressCall__Outputs(this);
  }
}

export class SetCollectorAddressCall__Inputs {
  _call: SetCollectorAddressCall;

  constructor(call: SetCollectorAddressCall) {
    this._call = call;
  }

  get _collectorAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCollectorAddressCall__Outputs {
  _call: SetCollectorAddressCall;

  constructor(call: SetCollectorAddressCall) {
    this._call = call;
  }
}

export class SetEmergencyCall extends ethereum.Call {
  get inputs(): SetEmergencyCall__Inputs {
    return new SetEmergencyCall__Inputs(this);
  }

  get outputs(): SetEmergencyCall__Outputs {
    return new SetEmergencyCall__Outputs(this);
  }
}

export class SetEmergencyCall__Inputs {
  _call: SetEmergencyCall;

  constructor(call: SetEmergencyCall) {
    this._call = call;
  }

  get _emergency(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetEmergencyCall__Outputs {
  _call: SetEmergencyCall;

  constructor(call: SetEmergencyCall) {
    this._call = call;
  }
}

export class SetParamsCall extends ethereum.Call {
  get inputs(): SetParamsCall__Inputs {
    return new SetParamsCall__Inputs(this);
  }

  get outputs(): SetParamsCall__Outputs {
    return new SetParamsCall__Outputs(this);
  }
}

export class SetParamsCall__Inputs {
  _call: SetParamsCall;

  constructor(call: SetParamsCall) {
    this._call = call;
  }

  get _alpha(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _beta(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _feeAtHalt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _epsilon(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _lambda(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SetParamsCall__Outputs {
  _call: SetParamsCall;

  constructor(call: SetParamsCall) {
    this._call = call;
  }
}

export class SetPausedCall extends ethereum.Call {
  get inputs(): SetPausedCall__Inputs {
    return new SetPausedCall__Inputs(this);
  }

  get outputs(): SetPausedCall__Outputs {
    return new SetPausedCall__Outputs(this);
  }
}

export class SetPausedCall__Inputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }
}

export class SetPausedCall__Outputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }
}

export class SetProtocolPercentFeeCall extends ethereum.Call {
  get inputs(): SetProtocolPercentFeeCall__Inputs {
    return new SetProtocolPercentFeeCall__Inputs(this);
  }

  get outputs(): SetProtocolPercentFeeCall__Outputs {
    return new SetProtocolPercentFeeCall__Outputs(this);
  }
}

export class SetProtocolPercentFeeCall__Inputs {
  _call: SetProtocolPercentFeeCall;

  constructor(call: SetProtocolPercentFeeCall) {
    this._call = call;
  }

  get _protocolPercentFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetProtocolPercentFeeCall__Outputs {
  _call: SetProtocolPercentFeeCall;

  constructor(call: SetProtocolPercentFeeCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
