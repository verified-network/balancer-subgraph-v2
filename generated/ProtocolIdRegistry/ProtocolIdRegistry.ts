// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ProtocolIdRegistered extends ethereum.Event {
  get params(): ProtocolIdRegistered__Params {
    return new ProtocolIdRegistered__Params(this);
  }
}

export class ProtocolIdRegistered__Params {
  _event: ProtocolIdRegistered;

  constructor(event: ProtocolIdRegistered) {
    this._event = event;
  }

  get protocolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class ProtocolIdRenamed extends ethereum.Event {
  get params(): ProtocolIdRenamed__Params {
    return new ProtocolIdRenamed__Params(this);
  }
}

export class ProtocolIdRenamed__Params {
  _event: ProtocolIdRenamed;

  constructor(event: ProtocolIdRenamed) {
    this._event = event;
  }

  get protocolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class ProtocolIdRegistry extends ethereum.SmartContract {
  static bind(address: Address): ProtocolIdRegistry {
    return new ProtocolIdRegistry("ProtocolIdRegistry", address);
  }

  getActionId(selector: Bytes): Bytes {
    let result = super.call("getActionId", "getActionId(bytes4):(bytes32)", [
      ethereum.Value.fromFixedBytes(selector)
    ]);

    return result[0].toBytes();
  }

  try_getActionId(selector: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getActionId", "getActionId(bytes4):(bytes32)", [
      ethereum.Value.fromFixedBytes(selector)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAuthorizer(): Address {
    let result = super.call("getAuthorizer", "getAuthorizer():(address)", []);

    return result[0].toAddress();
  }

  try_getAuthorizer(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAuthorizer",
      "getAuthorizer():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getProtocolName(protocolId: BigInt): string {
    let result = super.call(
      "getProtocolName",
      "getProtocolName(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(protocolId)]
    );

    return result[0].toString();
  }

  try_getProtocolName(protocolId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getProtocolName",
      "getProtocolName(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(protocolId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getVault(): Address {
    let result = super.call("getVault", "getVault():(address)", []);

    return result[0].toAddress();
  }

  try_getVault(): ethereum.CallResult<Address> {
    let result = super.tryCall("getVault", "getVault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isValidProtocolId(protocolId: BigInt): boolean {
    let result = super.call(
      "isValidProtocolId",
      "isValidProtocolId(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(protocolId)]
    );

    return result[0].toBoolean();
  }

  try_isValidProtocolId(protocolId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidProtocolId",
      "isValidProtocolId(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(protocolId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RegisterProtocolIdCall extends ethereum.Call {
  get inputs(): RegisterProtocolIdCall__Inputs {
    return new RegisterProtocolIdCall__Inputs(this);
  }

  get outputs(): RegisterProtocolIdCall__Outputs {
    return new RegisterProtocolIdCall__Outputs(this);
  }
}

export class RegisterProtocolIdCall__Inputs {
  _call: RegisterProtocolIdCall;

  constructor(call: RegisterProtocolIdCall) {
    this._call = call;
  }

  get protocolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RegisterProtocolIdCall__Outputs {
  _call: RegisterProtocolIdCall;

  constructor(call: RegisterProtocolIdCall) {
    this._call = call;
  }
}

export class RenameProtocolIdCall extends ethereum.Call {
  get inputs(): RenameProtocolIdCall__Inputs {
    return new RenameProtocolIdCall__Inputs(this);
  }

  get outputs(): RenameProtocolIdCall__Outputs {
    return new RenameProtocolIdCall__Outputs(this);
  }
}

export class RenameProtocolIdCall__Inputs {
  _call: RenameProtocolIdCall;

  constructor(call: RenameProtocolIdCall) {
    this._call = call;
  }

  get protocolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newName(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RenameProtocolIdCall__Outputs {
  _call: RenameProtocolIdCall;

  constructor(call: RenameProtocolIdCall) {
    this._call = call;
  }
}
